// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate if the method successfully creates a new Screen object when a valid Screen object is provided.
   Test Steps: 
   - Create a valid Screen object with all necessary fields filled.
   - Call the createScreen function with this Screen object as parameter.
   Expected Result: The function should return the same Screen object with a newly generated ID.

2. Scenario: Validate if the function correctly handles null Screen object.
   Test Steps: 
   - Call the createScreen function with null as parameter.
   Expected Result: The function should throw a validation error.

3. Scenario: Validate if the function correctly handles a Screen object with missing mandatory fields.
   Test Steps: 
   - Create a Screen object with one or more mandatory fields missing.
   - Call the createScreen function with this Screen object as parameter.
   Expected Result: The function should throw a validation error.

4. Scenario: Validate if the function correctly handles a Screen object with invalid data in its fields.
   Test Steps: 
   - Create a Screen object with invalid data in one or more fields.
   - Call the createScreen function with this Screen object as parameter.
   Expected Result: The function should throw a validation error.

5. Scenario: Validate if the function correctly generates a unique ID for each new Screen object.
   Test Steps: 
   - Create multiple valid Screen objects and call the createScreen function with each object.
   - Compare the IDs of the returned Screen objects.
   Expected Result: All the IDs should be unique.

6. Scenario: Validate if the function saves the new Screen object in the repository.
   Test Steps: 
   - Create a valid Screen object and call the createScreen function with this object.
   - Check the repository for this new Screen object.
   Expected Result: The new Screen object should be found in the repository.

7. Scenario: Validate if the function handles exceptions correctly when unable to save the Screen object in the repository.
   Test Steps: 
   - Create a valid Screen object and call the createScreen function with this object.
   - Simulate a failure in saving the object in the repository.
   Expected Result: The function should throw an appropriate exception.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;

import javax.validation.ConstraintViolationException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class Controller_createScreen_33abd0691b_Test {

    @Mock
    private Repository repository;

    @Autowired
    @InjectMocks
    private Controller controller;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateScreen_Success() {
        Screen screen = new Screen();
        screen.setScreenName("Screen 1");
        screen.setSeats(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)));
        screen.setSeatBooked(false);

        when(repository.save(any(Screen.class))).thenReturn(screen);

        Screen returnedScreen = controller.createScreen(screen);

        assertNotNull(returnedScreen.get_id());
        assertEquals(screen.getScreenName(), returnedScreen.getScreenName());
        assertEquals(screen.getSeats(), returnedScreen.getSeats());
        assertEquals(screen.isSeatBooked(), returnedScreen.isSeatBooked());
    }

    @Test
    public void testCreateScreen_NullScreen() {
        assertThrows(ConstraintViolationException.class, () -> controller.createScreen(null));
    }

    @Test
    public void testCreateScreen_MissingMandatoryFields() {
        Screen screen = new Screen();
        assertThrows(ConstraintViolationException.class, () -> controller.createScreen(screen));
    }

    @Test
    public void testCreateScreen_InvalidDataInFields() {
        Screen screen = new Screen();
        screen.setScreenName("");
        screen.setSeats(new ArrayList<>());
        screen.setSeatBooked(false);

        assertThrows(ConstraintViolationException.class, () -> controller.createScreen(screen));
    }

    @Test
    public void testCreateScreen_UniqueID() {
        Screen screen1 = new Screen();
        screen1.setScreenName("Screen 1");
        screen1.setSeats(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)));
        screen1.setSeatBooked(false);

        Screen screen2 = new Screen();
        screen2.setScreenName("Screen 2");
        screen2.setSeats(new ArrayList<>(Arrays.asList(6, 7, 8, 9, 10)));
        screen2.setSeatBooked(false);

        when(repository.save(any(Screen.class))).thenReturn(screen1).thenReturn(screen2);

        Screen returnedScreen1 = controller.createScreen(screen1);
        Screen returnedScreen2 = controller.createScreen(screen2);

        assertNotNull(returnedScreen1.get_id());
        assertNotNull(returnedScreen2.get_id());
        assertNotEquals(returnedScreen1.get_id(), returnedScreen2.get_id());
    }

    @Test
    public void testCreateScreen_SavesInRepository() {
        Screen screen = new Screen();
        screen.setScreenName("Screen 1");
        screen.setSeats(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)));
        screen.setSeatBooked(false);

        when(repository.save(any(Screen.class))).thenReturn(screen);
        when(repository.findBy_id(any(ObjectId.class))).thenReturn(screen);

        Screen returnedScreen = controller.createScreen(screen);

        Screen foundScreen = repository.findBy_id(new ObjectId(returnedScreen.get_id()));
        assertEquals(screen.getScreenName(), foundScreen.getScreenName());
        assertEquals(screen.getSeats(), foundScreen.getSeats());
        assertEquals(screen.isSeatBooked(), foundScreen.isSeatBooked());
    }

    @Test
    public void testCreateScreen_ExceptionWhenSaving() {
        Screen screen = new Screen();
        screen.setScreenName("Screen 1");
        screen.setSeats(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)));
        screen.setSeatBooked(false);

        when(repository.save(any(Screen.class))).thenThrow(new RuntimeException("Unable to save"));

        assertThrows(RuntimeException.class, () -> controller.createScreen(screen));
    }
}
