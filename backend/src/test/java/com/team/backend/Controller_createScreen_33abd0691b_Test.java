// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@SpringBootTest
@ContextConfiguration
@TestPropertySource("/application-test.properties")
@WebAppConfiguration
public class Controller_createScreen_33abd0691b_Test {

    @Autowired
    private ScreenRepository repository;

    @RestController
    public class ScreenController {

        @RequestMapping(value = "/screens", method = RequestMethod.POST)
        public ResponseEntity<Screen> createScreen(@Valid @RequestBody Screen screens) {
            screens.set_id(ObjectId.get());
            repository.save(screens);
            return new ResponseEntity<>(screens, HttpStatus.CREATED);
        }
    }

    private ResponseEntity<Screen> response;
    private Screen screen;

    @Given("^a screen with id (\\d+), name \"([^\"]*)\", and size (\\d+)$")
    public void aScreenWithIdNameAndSize(int id, String name, int size) {
        screen = new Screen(id, name, size);
    }

    @When("^the createScreen method is called$")
    public void theCreateScreenMethodIsCalled() {
        repository = mock(ScreenRepository.class);
        when(repository.save(screen)).thenReturn(screen);
        ScreenController controller = new ScreenController();
        response = controller.createScreen(screen);
    }

    @Then("^the screen is created successfully$")
    public void theScreenIsCreatedSuccessfully() {
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(screen, response.getBody());
    }

    @Given("^a screen with invalid id, name \"([^\"]*)\", and size (\\d+)$")
    public void aScreenWithInvalidIdNameAndSize(String name, int size) {
        screen = new Screen(-1, name, size);
    }

    @Then("^the screen creation fails$")
    public void theScreenCreationFails() {
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Given("^a screen with id (\\d+), name \"([^\"]*)\", and invalid size$")
    public void aScreenWithIdNameAndInvalidSize(int id, String name) {
        screen = new Screen(id, name, -1);
    }

    @Given("^a screen with id (\\d+), empty name, and size (\\d+)$")
    public void aScreenWithIdEmptyNameAndSize(int id, int size) {
        screen = new Screen(id, "", size);
    }

    @Given("^a screen with id (\\d+), name \"([^\"]*)\", and size (\\d+)$")
    public void aScreenWithIdNameAndSize(int id, String name, int size) {
        screen = new Screen(id, name, size);
    }

    @Given("^a screen with duplicate id (\\d+), name \"([^\"]*)\", and size (\\d+)$")
    public void aScreenWithDuplicateIdNameAndSize(int id, String name, int size) {
        screen = new Screen(id, name, size);
        when(repository.existsById(id)).thenReturn(true);
    }

    @Then("^the screen creation fails with a conflict error$")
    public void theScreenCreationFailsWithAConflictError() {
        assertEquals(HttpStatus.CONFLICT, response.getStatusCode());
    }

    @Given("^a screen with id (\\d+), name \"([^\"]*)\", and size (\\d+)$")
    public void aScreenWithIdNameAndSize(int id, String name, int size) {
        screen = new Screen(id, name, size);
    }

    @Given("^the screen repository is not available$")
    public void theScreenRepositoryIsNotAvailable() {
        repository = null;
    }

    @Then("^the screen creation fails with an internal server error$")
    public void theScreenCreationFailsWithAnInternalServerError() {
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
}
