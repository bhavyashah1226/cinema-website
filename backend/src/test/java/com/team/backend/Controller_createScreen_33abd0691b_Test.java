// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate if the method successfully creates a new screen object when a valid screen object is provided.
   Test Steps:
   - Create a valid screen object
   - Call createScreen method with the created screen object
   - Assert that the returned screen object is not null and has a new unique _id

2. Scenario: Validate if the method throws an exception when an invalid screen object is provided.
   Test Steps:
   - Create an invalid screen object (with any mandatory field missing or having invalid data)
   - Call createScreen method with the created screen object
   - Assert that the method throws a validation exception

3. Scenario: Validate if the method creates a new screen object with unique _id each time.
   Test Steps:
   - Create two valid screen objects
   - Call createScreen method with both screen objects one by one
   - Assert that the returned screen objects have different _ids

4. Scenario: Validate if the method successfully saves the created screen object into the repository.
   Test Steps:
   - Create a valid screen object
   - Call createScreen method with the created screen object
   - Retrieve the screen object from the repository using the returned _id
   - Assert that the retrieved screen object is equal to the created one

5. Scenario: Validate if the method throws an exception when it fails to save the created screen object into the repository.
   Test Steps:
   - Create a valid screen object
   - Mock the repository to throw an exception when save method is called
   - Call createScreen method with the created screen object
   - Assert that the method throws the expected exception

6. Scenario: Validate if the method successfully sets a new _id to the screen object.
   Test Steps:
   - Create a valid screen object with a pre-set _id
   - Call createScreen method with the created screen object
   - Assert that the returned screen object's _id is different from the pre-set _id

7. Scenario: Validate if the method throws an exception when a null screen object is provided.
   Test Steps:
   - Call createScreen method with a null screen object
   - Assert that the method throws a NullPointerException
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class Controller_createScreen_33abd0691b_Test {

    @Mock
    private Repository repository;

    @InjectMocks
    private Controller controller;

    private Screen screen;

    @BeforeEach
    public void setup() {
        screen = new Screen();
        screen.setScreenName("Screen1");
        screen.setSeats(new ArrayList());
        screen.setSeatBooked(false);
    }

    @Test
    public void testCreateScreen_ValidScreen() {
        when(repository.save(any(Screen.class))).thenReturn(screen);
        Screen result = controller.createScreen(screen);
        assertNotNull(result);
        assertNotNull(result.get_id());
    }

    @Test
    public void testCreateScreen_InvalidScreen() {
        screen.setScreenName(null);
        assertThrows(IllegalArgumentException.class, () -> controller.createScreen(screen));
    }

    @Test
    public void testCreateScreen_UniqueID() {
        when(repository.save(any(Screen.class))).thenReturn(screen);
        Screen result1 = controller.createScreen(screen);
        Screen result2 = controller.createScreen(screen);
        assertNotEquals(result1.get_id(), result2.get_id());
    }

    @Test
    public void testCreateScreen_SaveToRepository() {
        when(repository.save(any(Screen.class))).thenReturn(screen);
        Screen result = controller.createScreen(screen);
        verify(repository, times(1)).save(screen);
    }

    @Test
    public void testCreateScreen_RepositoryException() {
        when(repository.save(any(Screen.class))).thenThrow(new RuntimeException());
        assertThrows(RuntimeException.class, () -> controller.createScreen(screen));
    }

    @Test
    public void testCreateScreen_SetNewID() {
        screen.set_id(ObjectId.get());
        String oldId = screen.get_id();
        when(repository.save(any(Screen.class))).thenReturn(screen);
        Screen result = controller.createScreen(screen);
        assertNotEquals(oldId, result.get_id());
    }

    @Test
    public void testCreateScreen_NullScreen() {
        assertThrows(NullPointerException.class, () -> controller.createScreen(null));
    }
}
