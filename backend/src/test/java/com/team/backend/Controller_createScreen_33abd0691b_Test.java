// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
public class Controller_createScreen_33abd0691b_Test {

    private MockMvc mockMvc;

    @Mock
    private ScreenRepository repository;

    @InjectMocks
    private ScreenController screenController;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(screenController).build();
    }

    @Test
    public void createScreen_Successful() throws Exception {
        Screen screen = new Screen();
        screen.setName("Test Screen");
        screen.setType("Type A");

        when(repository.save(any(Screen.class))).thenReturn(screen);

        mockMvc.perform(post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(screen)))
                .andExpect(status().isOk());

        assertThat(screen.get_id()).isNotNull();
    }

    @Test
    public void createScreen_InvalidInput() throws Exception {
        Screen screen = new Screen();
        screen.setName("");
        screen.setType("Type A");

        mockMvc.perform(post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(screen)))
                .andExpect(status().isBadRequest());
    }

    private String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
