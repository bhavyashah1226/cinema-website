// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

@WebMvcTest
public class Controller_createScreen_33abd0691b_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ScreenRepository repository;

    @BeforeEach
    public void setup() {
        when(repository.save(any(Screen.class))).thenReturn(new Screen(ObjectId.get(), "Test Screen"));
    }

    @Test
    public void testCreateScreen_Success() throws Exception {
        Screen screen = new Screen(null, "Test Screen");
        String requestJson = "{\"name\":\"Test Screen\"}";

        mockMvc.perform(MockMvcRequestBuilders.post("/screen")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.name").value("Test Screen"));
    }

    @Test
    public void testCreateScreen_InvalidInput() throws Exception {
        Screen screen = new Screen(null, null);
        String requestJson = "{\"name\":null}";

        mockMvc.perform(MockMvcRequestBuilders.post("/screen")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }

    @Test
    public void testCreateScreen_Exception() throws Exception {
        Screen screen = new Screen(null, "Test Screen");
        String requestJson = "{\"name\":\"Test Screen\"}";

        when(repository.save(any(Screen.class))).thenThrow(new RuntimeException("Internal Server Error"));

        mockMvc.perform(MockMvcRequestBuilders.post("/screen")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(MockMvcResultMatchers.status().isInternalServerError())
                .andExpect(MockMvcResultMatchers.jsonPath("$.message").value("Internal Server Error"));
    }
}
