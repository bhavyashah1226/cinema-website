// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@WebMvcTest
public class Controller_createScreen_33abd0691b_Test {

    @Mock
    private ScreenRepository repository;

    @InjectMocks
    private ScreenController controller;

    private MockMvc mockMvc;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void createScreen_ValidRequest_ReturnsCreatedScreen() throws Exception {
        Screen screen = new Screen();
        screen.set_id(ObjectId.get());
        screen.setName("Test Screen");

        when(repository.save(any(Screen.class))).thenReturn(screen);

        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"Test Screen\"}"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.name").value("Test Screen"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.id").isNotEmpty());

        Assertions.assertEquals(screen, repository.save(screen));
    }

    @Test
    public void createScreen_InvalidRequest_ReturnsBadRequest() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"\"}"))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());

        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());

        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"Test Screen\"}"))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }
}
