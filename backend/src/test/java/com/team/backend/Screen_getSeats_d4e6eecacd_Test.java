// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.util.ArrayList;

public class Screen_getSeats_d4e6eecacd_Test {

    private Screen screen;
    private ArrayList<String> expectedSeats;

    @Given("a screen with seats")
    public void aScreenWithSeats() {
        screen = new Screen();
        screen.addSeat("A1");
        screen.addSeat("A2");
        screen.addSeat("B1");
        screen.addSeat("B2");
    }

    @When("I get the seats")
    public void iGetTheSeats() {
        expectedSeats = screen.getSeats();
    }

    @Then("I should get all the seats")
    public void iShouldGetAllTheSeats() {
        ArrayList<String> actualSeats = new ArrayList<>();
        actualSeats.add("A1");
        actualSeats.add("A2");
        actualSeats.add("B1");
        actualSeats.add("B2");

        Assert.assertEquals(expectedSeats, actualSeats);
    }

    @Given("a screen without seats")
    public void aScreenWithoutSeats() {
        screen = new Screen();
    }

    @Then("I should get an empty list")
    public void iShouldGetAnEmptyList() {
        ArrayList<String> actualSeats = new ArrayList<>();

        Assert.assertEquals(expectedSeats, actualSeats);
    }
    
    @Given("a screen with seats")
    public void aScreenWithSeats() {
        screen = new Screen();
        screen.addSeat("A1");
        screen.addSeat("A2");
        screen.addSeat("B1");
        screen.addSeat("B2");
    }

    @When("I get the seats")
    public void iGetTheSeats() {
        expectedSeats = screen.getSeats();
    }

    @Then("I should get all the seats")
    public void iShouldGetAllTheSeats() {
        ArrayList<String> actualSeats = new ArrayList<>();
        actualSeats.add("A1");
        actualSeats.add("A2");
        actualSeats.add("B1");
        actualSeats.add("B2");

        Assert.assertEquals(expectedSeats, actualSeats);
    }

    @Given("a screen without seats")
    public void aScreenWithoutSeats() {
        screen = new Screen();
    }

    @Then("I should get an empty list")
    public void iShouldGetAnEmptyList() {
        ArrayList<String> actualSeats = new ArrayList<>();

        Assert.assertEquals(expectedSeats, actualSeats);
    }
}
