// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.awaitility.Awaitility.await;
import static java.util.concurrent.TimeUnit.SECONDS;

@RunWith(SpringRunner.class)
@SpringBootTest
public class Screen_getSeats_d4e6eecacd_Test {

    @InjectMocks
    private Screen screen;

    @Mock
    private ExternalService externalService;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetSeats_success() {
        ArrayList<Seat> expectedSeats = new ArrayList<>();
        expectedSeats.add(new Seat("A1", false));
        expectedSeats.add(new Seat("A2", false));
        expectedSeats.add(new Seat("A3", true));

        when(externalService.getSeats()).thenReturn(expectedSeats);

        ArrayList<Seat> actualSeats = screen.getSeats();

        assertThat(actualSeats).isEqualTo(expectedSeats);
    }

    @Test
    public void testGetSeats_empty() {
        ArrayList<Seat> expectedSeats = new ArrayList<>();

        when(externalService.getSeats()).thenReturn(expectedSeats);

        ArrayList<Seat> actualSeats = screen.getSeats();

        assertThat(actualSeats).isEqualTo(expectedSeats);
    }

    @Test
    public void testGetSeats_exception() {
        when(externalService.getSeats()).thenThrow(new RuntimeException("Error retrieving seats"));

        ArrayList<Seat> actualSeats = screen.getSeats();

        assertThat(actualSeats).isNull();
    }
}
