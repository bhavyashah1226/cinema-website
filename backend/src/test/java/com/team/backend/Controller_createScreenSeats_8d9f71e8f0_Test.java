// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class Controller_createScreenSeats_8d9f71e8f0_Test {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testCreateScreenSeats_Success() throws Exception {
        // Prepare request body
        String requestBody = "{ \"name\": \"Screen 1\", \"seats\": 100 }";

        // Send POST request to create screen seats
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        // Verify the response
        Assert.assertEquals("Screen 1", result.getResponse().getContentAsString());
    }

    @Test
    public void testCreateScreenSeats_InvalidRequestBody() throws Exception {
        // Prepare invalid request body
        String requestBody = "{ \"name\": \"Screen 1\" }";

        // Send POST request to create screen seats
        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }
}
