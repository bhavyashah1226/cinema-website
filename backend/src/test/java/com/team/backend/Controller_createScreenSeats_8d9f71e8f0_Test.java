// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import javax.validation.Valid;
import java.util.List;

import static org.mockito.Mockito.when;

@WebMvcTest
@AutoConfigureMockMvc
public class Controller_createScreenSeats_8d9f71e8f0_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ScreenRepository repository;

    @BeforeEach
    public void setUp() {
        // TODO: Add necessary setup code
    }

    @Test
    public void testCreateScreenSeats_Success() throws Exception {
        // Arrange
        Screen screen = new Screen();
        screen.setName("Screen 1");
        screen.setSeats(List.of("A1", "A2", "B1", "B2"));

        when(repository.save(screen)).thenReturn(screen);

        // Act and Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .content("{\"name\":\"Screen 1\",\"seats\":[\"A1\",\"A2\",\"B1\",\"B2\"]}")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.name").value("Screen 1"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.seats.length()").value(4))
                .andExpect(MockMvcResultMatchers.jsonPath("$.seats[0]").value("A1"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.seats[1]").value("A2"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.seats[2]").value("B1"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.seats[3]").value("B2"));
    }

    @Test
    public void testCreateScreenSeats_Failure() throws Exception {
        // Arrange
        Screen screen = new Screen();
        screen.setName("Screen 1");
        screen.setSeats(List.of("A1", "A2", "B1", "B2"));

        when(repository.save(screen)).thenReturn(null);

        // Act and Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/screens")
                .content("{\"name\":\"Screen 1\",\"seats\":[\"A1\",\"A2\",\"B1\",\"B2\"]}")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isInternalServerError())
                .andExpect(MockMvcResultMatchers.jsonPath("$.message").value("Error occurred while creating screen seats"));
    }
}
