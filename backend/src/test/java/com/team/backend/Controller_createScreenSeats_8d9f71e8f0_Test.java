// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@WebMvcTest(controllers = YourController.class)
@AutoConfigureMockMvc
public class Controller_createScreenSeats_8d9f71e8f0_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private YourRepository repository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateScreenSeats_Success() throws Exception {
        Screen screens = new Screen();
        screens.setId("1");
        screens.setName("Screen 1");

        when(repository.save(any(Screen.class))).thenReturn(screens);

        mockMvc.perform(MockMvcRequestBuilders.post("/api/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"id\": \"1\", \"name\": \"Screen 1\"}"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.id").value("1"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.name").value("Screen 1"));
    }

    @Test
    public void testCreateScreenSeats_Failure() throws Exception {
        when(repository.save(any(Screen.class))).thenThrow(new RuntimeException("Failed to save screen"));

        mockMvc.perform(MockMvcRequestBuilders.post("/api/screens")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"id\": \"1\", \"name\": \"Screen 1\"}"))
                .andExpect(MockMvcResultMatchers.status().isInternalServerError())
                .andExpect(MockMvcResultMatchers.jsonPath("$.message").value("Failed to save screen"));
    }
}
