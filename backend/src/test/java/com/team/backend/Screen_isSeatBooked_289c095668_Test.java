/*
Test generated by RoostGPT for test restAssuredVertexAi using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns a boolean value.
   Test to ensure that the function `isSeatBooked()` returns either true or false. 

2. Scenario: Check when the seat is booked.
   Initially, set the `seatBooked` as true. Run the `isSeatBooked()` method and validate if it returns true.

3. Scenario: Check when the seat is not booked.
   Initially, set the `seatBooked` as false. Run the `isSeatBooked()` method and validate if it returns false.

4. Scenario: Check the default value of `seatBooked`.
   Without setting a value for `seatBooked`, check the return value of `isSeatBooked()`. The result should be false because the default value of a boolean is false in Java.

5. Scenario: Check the function in multithreaded environment.
   Create multiple threads and in each of them, try to access `isSeatBooked()` method. This test will ensure that the function works as expected in a multithreaded environment.

6. Scenario: Check the function after changing the value of `seatBooked`.
   Initially, set the `seatBooked` as true. Run the `isSeatBooked()` method and validate if it returns true. Then change the `seatBooked` to false. Run the `isSeatBooked()` method again and validate if it returns false.

7. Scenario: Check the function's interaction with other methods.
   If there are other methods in the class that change the `seatBooked` value, check the return value of the `isSeatBooked()` after calling these methods.
*/
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Screen_isSeatBooked_289c095668_Test {

    @Test
    public void testIsSeatBookedReturnsBoolean() {
        Screen screen = new Screen();
        assertTrue(screen.isSeatBooked() == true || screen.isSeatBooked() == false);
    }

    @Test
    public void testIsSeatBookedWhenSeatIsBooked() {
        Screen screen = new Screen();
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    public void testIsSeatBookedWhenSeatIsNotBooked() {
        Screen screen = new Screen();
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    public void testIsSeatBookedDefaultValue() {
        Screen screen = new Screen();
        assertFalse(screen.isSeatBooked());
    }

    @Test
    public void testIsSeatBookedInMultithreadedEnvironment() throws InterruptedException {
        Screen screen = new Screen();
        ExecutorService service = Executors.newFixedThreadPool(10);
        for (int i = 0; i < 10; i++) {
            service.execute(() -> screen.isSeatBooked());
        }
        service.shutdown();
        while (!service.isTerminated()) {
        }
    }

    @Test
    public void testIsSeatBookedAfterChangingValue() {
        Screen screen = new Screen();
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    // TODO: Add more tests here for other methods in the class that change the `seatBooked` value. 
}

class Screen {
    public ObjectId _id;
    private String screenName;
    private ArrayList seats = new ArrayList();
    private boolean seatBooked;

    public Screen() {}

    public String get_id() {
        return _id.toHexString();
    }

    public void set_id(ObjectId _id) {
        this._id = _id;
    }

    public String getScreenName() {
        return screenName;
    }

    public void setScreenName(String screenName) {
        this.screenName = screenName;
    }

    public ArrayList getSeats() {
        return seats;
    }

    public void setSeats(ArrayList seats) {
        this.seats = seats;
    }

    public boolean isSeatBooked() {
        return seatBooked;
    }

    public void setSeatBooked(boolean seatBooked) {
        this.seatBooked = seatBooked;
    }
}
