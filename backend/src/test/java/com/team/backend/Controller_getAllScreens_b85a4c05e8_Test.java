// Test generated by RoostGPT for test cinemaWebsite using AI Type Open AI and AI Model gpt-4

package com.team.backend;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.util.List;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
public class Controller_getAllScreens_b85a4c05e8_Test {

    @InjectMocks
    private ScreenController screenController;

    @Mock
    private ScreenRepository screenRepository;

    @Test
    public void testGetAllScreens_Success() {
        Screen screen1 = new Screen(ObjectId.get(), "Screen1", "Description1");
        Screen screen2 = new Screen(ObjectId.get(), "Screen2", "Description2");
        List<Screen> expectedScreens = Arrays.asList(screen1, screen2);

        when(screenRepository.findAll()).thenReturn(expectedScreens);

        List<Screen> actualScreens = screenController.getAllScreens();
        assertEquals(expectedScreens, actualScreens);
    }

    @Test
    public void testGetAllScreens_Empty() {
        List<Screen> expectedScreens = Arrays.asList();

        when(screenRepository.findAll()).thenReturn(expectedScreens);

        List<Screen> actualScreens = screenController.getAllScreens();
        assertEquals(expectedScreens, actualScreens);
    }
}
