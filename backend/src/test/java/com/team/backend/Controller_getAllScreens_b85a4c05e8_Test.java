// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;
import static org.awaitility.Duration.ONE_SECOND;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Controller_getAllScreens_b85a4c05e8_Test {

    @Autowired
    private ScreenRepository repository;

    @Test
    public void testGetAllScreensSuccess() {
        // Mock the repository
        ScreenRepository repositoryMock = mock(ScreenRepository.class);
        when(repositoryMock.findAll()).thenReturn(getMockScreens());

        // Call the method
        List<Screen> screens = repositoryMock.findAll();

        // Verify the result
        assertThat(screens).isNotNull();
        assertThat(screens).hasSize(2);
        assertThat(screens.get(0).getId()).isEqualTo("1");
        assertThat(screens.get(0).getName()).isEqualTo("Screen 1");
        assertThat(screens.get(1).getId()).isEqualTo("2");
        assertThat(screens.get(1).getName()).isEqualTo("Screen 2");
    }

    @Test
    public void testGetAllScreensEmpty() {
        // Mock the repository
        ScreenRepository repositoryMock = mock(ScreenRepository.class);
        when(repositoryMock.findAll()).thenReturn(Collections.emptyList());

        // Call the method
        List<Screen> screens = repositoryMock.findAll();

        // Verify the result
        assertThat(screens).isNotNull();
        assertThat(screens).isEmpty();
    }

    private List<Screen> getMockScreens() {
        List<Screen> screens = new ArrayList<>();
        screens.add(new Screen("1", "Screen 1"));
        screens.add(new Screen("2", "Screen 2"));
        return screens;
    }
}
