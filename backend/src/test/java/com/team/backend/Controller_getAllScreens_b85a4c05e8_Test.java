// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

import static org.awaitility.Awaitility.await;
import static org.awaitility.Awaitility.with;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import com.team.backend.Screen;
import com.team.backend.ScreenRepository;

@RunWith(SpringJUnit4ClassRunner.class)
public class Controller_getAllScreens_b85a4c05e8_Test {

    @Mock
    private ScreenRepository repository;

    private Controller controller;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        controller = new Controller(repository);
    }

    @Test
    public void testGetAllScreens_Success() {
        // Given
        List<Screen> expectedScreens = new ArrayList<>();
        expectedScreens.add(new Screen("Screen1"));
        expectedScreens.add(new Screen("Screen2"));
        expectedScreens.add(new Screen("Screen3"));

        given(repository.findAll()).willReturn(expectedScreens);

        // When
        List<Screen> actualScreens = controller.getAllScreens();

        // Then
        assertThat(actualScreens, containsInAnyOrder(expectedScreens.toArray()));
    }

    @Test
    public void testGetAllScreens_EmptyList() {
        // Given
        List<Screen> expectedScreens = new ArrayList<>();

        given(repository.findAll()).willReturn(expectedScreens);

        // When
        List<Screen> actualScreens = controller.getAllScreens();

        // Then
        assertThat(actualScreens, is(empty()));
    }
}
