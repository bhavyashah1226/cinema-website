// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-3.5-turbo

package com.team.backend;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.team.backend.model.Screen;
import com.team.backend.repository.ScreenRepository;
import com.team.backend.service.ScreenService;

@ExtendWith(MockitoExtension.class)
public class Controller_getAllScreens_b85a4c05e8_Test {

    @Mock
    private ScreenRepository repository;

    @InjectMocks
    private ScreenService service;

    @Test
    public void testGetAllScreens_WhenScreensExist_ReturnScreenList() {
        // Arrange
        List<Screen> expectedScreens = new ArrayList<>();
        expectedScreens.add(new Screen("Screen 1"));
        expectedScreens.add(new Screen("Screen 2"));
        expectedScreens.add(new Screen("Screen 3"));
        when(repository.findAll()).thenReturn(expectedScreens);

        // Act
        List<Screen> actualScreens = service.getAllScreens();

        // Assert
        assertThat(actualScreens).isEqualTo(expectedScreens);
    }

    @Test
    public void testGetAllScreens_WhenNoScreensExist_ReturnEmptyList() {
        // Arrange
        List<Screen> expectedScreens = new ArrayList<>();
        when(repository.findAll()).thenReturn(expectedScreens);

        // Act
        List<Screen> actualScreens = service.getAllScreens();

        // Assert
        assertThat(actualScreens).isEmpty();
    }
}
