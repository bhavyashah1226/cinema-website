// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;


@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class Controller_getAllScreens_b85a4c05e8_Test {

    @InjectMocks
    ScreenController screenController;

    @Mock
    ScreenRepository screenRepository;

    @Test
    public void testGetAllScreens_EmptyList() {
        when(screenRepository.findAll()).thenReturn(new ArrayList<>());

        List<Screen> screens = screenController.getAllScreens();

        assertNotNull(screens);
        assertTrue(screens.isEmpty());
        verify(screenRepository, times(1)).findAll();
    }

    @Test
    public void testGetAllScreens_WithData() {
        List<Screen> expectedScreens = new ArrayList<>();
        expectedScreens.add(new Screen(ObjectId.get(), "Screen 1"));
        expectedScreens.add(new Screen(ObjectId.get(), "Screen 2"));

        when(screenRepository.findAll()).thenReturn(expectedScreens);

        List<Screen> actualScreens = screenController.getAllScreens();

        assertNotNull(actualScreens);
        assertEquals(expectedScreens.size(), actualScreens.size());
        verify(screenRepository, times(1)).findAll();
    }
}
