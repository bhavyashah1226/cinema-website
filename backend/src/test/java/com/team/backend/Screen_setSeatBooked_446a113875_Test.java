// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Set Seat as Booked
- In this scenario, the function setSeatBooked should be tested with a boolean value of 'true'. The expected result is that the seat is set as booked.

Test Scenario 2: Set Seat as Not Booked
- The function setSeatBooked should be tested with a boolean value of 'false'. The expected result is that the seat is set as not booked.

Test Scenario 3: Check Default Value
- Before any operation, check the default value of seatBooked. This scenario helps to understand the initial state of the seat.

Test Scenario 4: Change Seat Booking Status
- Initially, set the seat as booked by passing 'true'. Then, change the status by passing 'false'. The expected result is that the seat status should be updated successfully.

Test Scenario 5: Set Seat as Booked Multiple Times
- The function should be tested by setting the seat as booked multiple times. The expected result is that the seat remains booked and no exception should be thrown.

Test Scenario 6: Set Seat as Not Booked Multiple Times
- The function should be tested by setting the seat as not booked multiple times. The expected result is that the seat remains not booked and no exception should be thrown.

Test Scenario 7: Pass Null Value
- Pass a null value to the function. As the function expects a boolean value, it should throw a NullPointerException.

Test Scenario 8: Pass Non-boolean Value
- Pass a non-boolean value to the function. As the function expects a boolean value, it should throw a ClassCastException.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Screen_setSeatBooked_446a113875_Test {

    private Screen screen;

    @BeforeEach
    public void setUp() {
        screen = new Screen();
    }

    @Test
    public void testSetSeatAsBooked() {
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    public void testSetSeatAsNotBooked() {
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    public void testDefaultValue() {
        assertFalse(screen.isSeatBooked());
    }

    @Test
    public void testChangeSeatBookingStatus() {
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    public void testSetSeatAsBookedMultipleTimes() {
        screen.setSeatBooked(true);
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    public void testSetSeatAsNotBookedMultipleTimes() {
        screen.setSeatBooked(false);
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    public void testPassNullValue() {
        assertThrows(NullPointerException.class, () -> {
            Boolean seatBooked = null;
            screen.setSeatBooked(seatBooked);
        });
    }

    @Test
    public void testPassNonBooleanValue() {
        assertThrows(ClassCastException.class, () -> {
            Object seatBooked = new Object();
            screen.setSeatBooked((Boolean) seatBooked);
        });
    }
}
