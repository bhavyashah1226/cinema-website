// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. **Scenario: Check if the function works as expected when a seat is booked**
   - Given a seat that is not booked
   - When the function `setSeatBooked` is called with `true` as a parameter
   - Then check if the `seatBooked` value is updated to `true`

2. **Scenario: Check if the function works as expected when a seat is unbooked**
   - Given a seat that is booked
   - When the function `setSeatBooked` is called with `false` as a parameter
   - Then check if the `seatBooked` value is updated to `false`

3. **Scenario: Check if the function is idempotent when setting the same value multiple times**
   - Given a seat that is booked
   - When the function `setSeatBooked` is called multiple times with `true` as a parameter
   - Then check if the `seatBooked` value remains `true`

4. **Scenario: Check if the function handles null values**
   - Given a seat that is booked
   - When the function `setSeatBooked` is called with `null` as a parameter
   - Then check if an exception is thrown or if the `seatBooked` value remains unchanged

5. **Scenario: Check if the function works as expected when called in quick succession with different values**
   - Given a seat that is booked
   - When the function `setSeatBooked` is called first with `false` as a parameter and then immediately with `true` as a parameter
   - Then check if the `seatBooked` value is updated to `true`

6. **Scenario: Check if the function works as expected when called in quick succession with the same value**
   - Given a seat that is not booked
   - When the function `setSeatBooked` is called twice in quick succession with `true` as a parameter
   - Then check if the `seatBooked` value is updated to `true` after the first call and remains `true` after the second call

7. **Scenario: Check if the function works as expected when called from multiple threads**
   - Given a seat that is not booked
   - When the function `setSeatBooked` is called from multiple threads with `true` as a parameter
   - Then check if the `seatBooked` value is updated to `true` and if any race conditions or concurrency issues occur.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Screen_setSeatBooked_446a113875_Test {
    Screen screen;
    ObjectId id;
    String screenName;
    ArrayList seats;
    boolean seatBooked;

    @BeforeEach
    void setUp() {
        id = new ObjectId();
        screenName = "Screen 1";
        seats = new ArrayList();
        seatBooked = false;
        screen = new Screen();
        screen.set_id(id);
        screen.setScreenName(screenName);
        screen.setSeats(seats);
        screen.setSeatBooked(seatBooked);
    }

    @Test
    void testSetSeatBooked_WhenSeatIsNotBooked() {
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBooked_WhenSeatIsBooked() {
        screen.setSeatBooked(true);
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBooked_Idempotency() {
        screen.setSeatBooked(true);
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBooked_NullValue() {
        screen.setSeatBooked(true);
        assertThrows(NullPointerException.class, () -> screen.setSeatBooked(null));
    }

    @Test
    void testSetSeatBooked_QuickSuccessionDifferentValues() {
        screen.setSeatBooked(false);
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBooked_QuickSuccessionSameValue() {
        screen.setSeatBooked(true);
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBooked_MultipleThreads() throws InterruptedException {
        Thread t1 = new Thread(() -> screen.setSeatBooked(true));
        Thread t2 = new Thread(() -> screen.setSeatBooked(true));

        t1.start();
        t2.start();

        t1.join();
        t2.join();

        assertTrue(screen.isSeatBooked());
    }
}
