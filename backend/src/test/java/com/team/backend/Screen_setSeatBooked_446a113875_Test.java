// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function properly updates the status of `seatBooked` when a true value is passed. 
   Test Steps: 
   - Create a new instance of the containing class
   - Call the `setSeatBooked` method with argument `true`
   - Verify that `seatBooked` is now `true`

2. Scenario: Check if the function properly updates the status of `seatBooked` when a false value is passed. 
   Test Steps: 
   - Create a new instance of the containing class
   - Call the `setSeatBooked` method with argument `false`
   - Verify that `seatBooked` is now `false`

3. Scenario: Check if the function is able to handle null values. 
   Test Steps: 
   - Create a new instance of the containing class
   - Call the `setSeatBooked` method with argument `null`
   - Verify that `seatBooked` is now `false` or a NullPointerException is thrown depending on the business logic

4. Scenario: Check if the function can handle multiple calls. 
   Test Steps: 
   - Create a new instance of the containing class
   - Call the `setSeatBooked` method with argument `true`
   - Verify that `seatBooked` is now `true`
   - Call the `setSeatBooked` method with argument `false`
   - Verify that `seatBooked` is now `false`

5. Scenario: Check if the function is thread-safe. 
   Test Steps: 
   - Create a new instance of the containing class in a multi-threaded environment
   - Call the `setSeatBooked` method with argument `true` from multiple threads
   - Verify that `seatBooked` is now `true` and no race condition occurred

6. Scenario: Check if the function can handle calls from different instances of the containing class. 
   Test Steps: 
   - Create two new instances of the containing class
   - Call the `setSeatBooked` method with argument `true` for the first instance
   - Call the `setSeatBooked` method with argument `false` for the second instance
   - Verify that `seatBooked` is now `true` for the first instance and `false` for the second instance
*/

// ********RoostGPT********
package com.team.backend;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.bson.types.ObjectId;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class Screen_setSeatBooked_446a113875_Test {
    private Screen screen;

    @BeforeEach
    void setUp() {
        screen = new Screen();
    }

    @Test
    void testSetSeatBookedTrue() {
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBookedFalse() {
        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBookedNull() {
        assertThrows(NullPointerException.class, () -> screen.setSeatBooked(null));
    }

    @Test
    void testSetSeatBookedMultipleCalls() {
        screen.setSeatBooked(true);
        assertTrue(screen.isSeatBooked());

        screen.setSeatBooked(false);
        assertFalse(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBookedThreadSafe() throws InterruptedException {
        Thread t1 = new Thread(() -> screen.setSeatBooked(true));
        Thread t2 = new Thread(() -> screen.setSeatBooked(true));
        t1.start();
        t2.start();
        t1.join();
        t2.join();
        assertTrue(screen.isSeatBooked());
    }

    @Test
    void testSetSeatBookedDifferentInstances() {
        Screen screen1 = new Screen();
        Screen screen2 = new Screen();

        screen1.setSeatBooked(true);
        screen2.setSeatBooked(false);

        assertTrue(screen1.isSeatBooked());
        assertFalse(screen2.isSeatBooked());
    }
}
