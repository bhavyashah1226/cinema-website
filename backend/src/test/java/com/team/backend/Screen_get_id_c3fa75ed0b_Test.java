// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate that the function `get_id()` returns a hexadecimal string.
   **Test:** Call the `get_id()` function and check if the returned value is a hexadecimal string.

2. **Scenario:** Validate that the function `get_id()` returns the correct ID.
   **Test:** Create an ObjectId, convert it to a hexadecimal string, and compare it with the return value of `get_id()` function.

3. **Scenario:** Validate that the function `get_id()` returns a non-null value.
   **Test:** Call the `get_id()` function and check if the returned value is not null.

4. **Scenario:** Validate that the function `get_id()` returns a unique ID each time it's called.
   **Test:** Call the `get_id()` function multiple times and compare the returned values to ensure they are unique.

5. **Scenario:** Validate that the function `get_id()` returns an ID of correct length.
   **Test:** Call the `get_id()` function and check if the returned ID has the correct length of 24 characters (as ObjectId should be 24 hex characters).

6. **Scenario:** Validate that the function `get_id()` handles exception correctly when `_id` is null.
   **Test:** Set `_id` to null and call the `get_id()` function to see if it handles the situation without throwing an exception.

7. **Scenario:** Validate performance of the function `get_id()`.
   **Test:** Call the `get_id()` function multiple times in quick succession to check if it returns the result within acceptable time limit. 

8. **Scenario:** Validate thread-safety of the function `get_id()`.
   **Test:** Call the `get_id()` function from multiple threads concurrently and check if it returns correct and unique IDs for each call.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Screen_get_id_c3fa75ed0b_Test {

    Screen screen = new Screen();

    @Test
    public void testGetIdReturnsHexadecimal() {
        screen.set_id(new ObjectId());
        String id = screen.get_id();
        assertTrue(id.matches("-?[0-9a-fA-F]+"));
    }

    @Test
    public void testGetIdReturnsCorrectId() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        String id = screen.get_id();
        assertEquals(objectId.toHexString(), id);
    }

    @Test
    public void testGetIdReturnsNonNullValue() {
        screen.set_id(new ObjectId());
        String id = screen.get_id();
        assertNotNull(id);
    }

    @Test
    public void testGetIdReturnsUniqueIds() {
        screen.set_id(new ObjectId());
        String id1 = screen.get_id();
        screen.set_id(new ObjectId());
        String id2 = screen.get_id();
        assertNotEquals(id1, id2);
    }

    @Test
    public void testGetIdReturnsCorrectLengthId() {
        screen.set_id(new ObjectId());
        String id = screen.get_id();
        assertEquals(24, id.length());
    }

    @Test
    public void testGetIdHandlesNullId() {
        screen.set_id(null);
        assertThrows(NullPointerException.class, () -> screen.get_id());
    }

    // TODO: Add test for performance and thread-safety if necessary
}
