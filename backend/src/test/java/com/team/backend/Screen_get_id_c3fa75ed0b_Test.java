/*
Test generated by RoostGPT for test restAssuredVertexAi using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Id Test
- Description: Validate that the function returns a valid hexadecimal representation of the _id.
- Steps: 
    1. Initialize _id with a known ObjectId.
    2. Call the get_id() function.
    3. Check if the returned string matches the expected hexadecimal representation of _id.

Test Scenario 2: Null Id Test
- Description: Validate how the function handles when _id is null.
- Steps: 
    1. Set _id as null.
    2. Call the get_id() function.
    3. Check if the returned value is null or if an exception is thrown.

Test Scenario 3: Non-ObjectId Id Test
- Description: Validate how the function handles when _id is not an instance of ObjectId.
- Steps: 
    1. Set _id with a non-ObjectId value.
    2. Call the get_id() function.
    3. Check if an exception is thrown.

Test Scenario 4: Empty Id Test
- Description: Validate how the function handles when _id is an empty ObjectId.
- Steps: 
    1. Set _id with an empty ObjectId.
    2. Call the get_id() function.
    3. Check if the returned string is an empty string or if an exception is thrown.

Test Scenario 5: Large Id Test
- Description: Validate that the function can handle large ObjectId values.
- Steps: 
    1. Set _id with a large ObjectId value.
    2. Call the get_id() function.
    3. Check if the returned string correctly represents the large ObjectId value.
*/
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Test;

public class Screen_get_id_c3fa75ed0b_Test {

    @Test
    public void validIdTest() {
        ObjectId id = new ObjectId("507f1f77bcf86cd799439011");
        Screen screen = new Screen();
        screen.set_id(id);
        Assert.assertEquals("507f1f77bcf86cd799439011", screen.get_id());
    }

    @Test(expected = NullPointerException.class)
    public void nullIdTest() {
        Screen screen = new Screen();
        screen.set_id(null);
        screen.get_id();
    }

    @Test(expected = IllegalArgumentException.class)
    public void nonObjectIdIdTest() {
        Screen screen = new Screen();
        screen.set_id(new ObjectId("not an ObjectId"));
        screen.get_id();
    }

    @Test
    public void emptyIdTest() {
        Screen screen = new Screen();
        screen.set_id(new ObjectId(""));
        Assert.assertEquals("", screen.get_id());
    }

    @Test
    public void largeIdTest() {
        ObjectId id = new ObjectId("5a05e2b252f721a3cf2ea33f");
        Screen screen = new Screen();
        screen.set_id(id);
        Assert.assertEquals("5a05e2b252f721a3cf2ea33f", screen.get_id());
    }
}
