// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns the correct hexadecimal string representation of the ObjectId.
   Given a known ObjectId, when the `get_id` function is called, it should return the correct hexadecimal string representation of the ObjectId.

2. Scenario: Check if the function returns a non-null value.
   Given any ObjectId, when the `get_id` function is called, it should never return a null value.

3. Scenario: Check if the function handles an invalid ObjectId.
   Given an invalid ObjectId, when the `get_id` function is called, it should throw an appropriate exception or error.

4. Scenario: Check if the function handles a null ObjectId.
   Given a null ObjectId, when the `get_id` function is called, it should throw an appropriate exception or error.

5. Scenario: Check if the function returns a unique value for each ObjectId.
   Given two different ObjectIds, when the `get_id` function is called for each, it should return two different hexadecimal string representations.

6. Scenario: Check if the function returns the same value for the same ObjectId.
   Given the same ObjectId called twice, when the `get_id` function is called for each, it should return the same hexadecimal string representation.

7. Scenario: Check if the function can handle large number of requests.
   Given a large number of ObjectId requests, when the `get_id` function is called for each, it should be able to handle and process the requests without any performance issues.

8. Scenario: Check if the function returns a string of the correct length.
   Given any ObjectId, when the `get_id` function is called, it should return a string of exactly 24 characters, as this is the length of a hexadecimal ObjectId in MongoDB.

9. Scenario: Check if the function returns a string with valid hexadecimal characters only.
   Given any ObjectId, when the `get_id` function is called, it should return a string that contains only valid hexadecimal characters (0-9, a-f).
   
10. Scenario: Check if the function works with different types of ObjectId.
    Given different types of ObjectId (e.g., generated at different times, on different machines, etc.), when the `get_id` function is called for each, it should return the correct hexadecimal string representation for each.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.Test;

import static org.junit.Assert.*;

public class Screen_get_id_c3fa75ed0b_Test {
    
    @Test
    public void testGetId() {
        ObjectId objectId = new ObjectId("507f1f77bcf86cd799439011");
        Screen screen = new Screen();
        screen.set_id(objectId);
        assertEquals("507f1f77bcf86cd799439011", screen.get_id());
    }

    @Test(expected = NullPointerException.class)
    public void testGetIdWithNullObjectId() {
        Screen screen = new Screen();
        screen.get_id();
    }

    @Test
    public void testGetIdWithDifferentObjectIds() {
        ObjectId objectId1 = new ObjectId("507f1f77bcf86cd799439011");
        ObjectId objectId2 = new ObjectId("507f1f77bcf86cd799439012");
        Screen screen1 = new Screen();
        Screen screen2 = new Screen();
        screen1.set_id(objectId1);
        screen2.set_id(objectId2);
        assertNotEquals(screen1.get_id(), screen2.get_id());
    }

    @Test
    public void testGetIdWithSameObjectId() {
        ObjectId objectId = new ObjectId("507f1f77bcf86cd799439011");
        Screen screen1 = new Screen();
        Screen screen2 = new Screen();
        screen1.set_id(objectId);
        screen2.set_id(objectId);
        assertEquals(screen1.get_id(), screen2.get_id());
    }

    @Test
    public void testGetIdLength() {
        ObjectId objectId = new ObjectId();
        Screen screen = new Screen();
        screen.set_id(objectId);
        assertEquals(24, screen.get_id().length());
    }

    @Test
    public void testGetIdHexadecimal() {
        ObjectId objectId = new ObjectId();
        Screen screen = new Screen();
        screen.set_id(objectId);
        assertTrue(screen.get_id().matches("-?[0-9a-fA-F]+"));
    }
}
