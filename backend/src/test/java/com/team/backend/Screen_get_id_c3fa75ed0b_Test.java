// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package com.team.backend;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

public class Screen_get_id_c3fa75ed0b_Test {

   Screen screen;

   @Mock
   ObjectId _id;

   @BeforeEach
   public void setup() {
       MockitoAnnotations.initMocks(this);

       screen = new Screen();
   }

   @Test
   public void get_id_success() {
       when(_id.toHexString()).thenReturn("5a05e2b252f721a3cf2ea33f");
       
       screen.set_id(_id);

       String expected = "5a05e2b252f721a3cf2ea33f";
       String actual = screen.get_id();

       assertEquals(expected, actual, "Method should return hexadecimal string of the id.");
   }

   @Test
   public void get_id_noId() {
       // TODO: No id is set for the screen
       
       screen.set_id(null);

       String result = screen.get_id();

       assertNull(result, "Method should return null as no id is set.");
   }

   @Test
   public void get_id_invalidId() {
       // TODO: The mock id is set with an invalid hexadecimal value 
       
       when(_id.toHexString()).thenReturn("INVALID");

       screen.set_id(_id);

       String expected = "INVALID";
       String actual = screen.get_id();

       assertEquals(expected, actual, "Method should return the invalid hexadecimal string as it is.");
   }
}
