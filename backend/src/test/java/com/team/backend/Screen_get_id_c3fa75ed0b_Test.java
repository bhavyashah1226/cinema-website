// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate that the function `get_id()` returns a hexadecimal string.
   **Test:** Call the `get_id()` function and check if the returned value is a hexadecimal string.

2. **Scenario:** Validate that the function `get_id()` returns the correct ID.
   **Test:** Create an ObjectId, convert it to a hexadecimal string, and compare it with the return value of `get_id()` function.

3. **Scenario:** Validate that the function `get_id()` returns a non-null value.
   **Test:** Call the `get_id()` function and check if the returned value is not null.

4. **Scenario:** Validate that the function `get_id()` returns a unique ID each time it's called.
   **Test:** Call the `get_id()` function multiple times and compare the returned values to ensure they are unique.

5. **Scenario:** Validate that the function `get_id()` returns an ID of correct length.
   **Test:** Call the `get_id()` function and check if the returned ID has the correct length of 24 characters.

6. **Scenario:** Validate that the function `get_id()` handles exceptions properly when `_id` is null.
   **Test:** Set `_id` to null, call the `get_id()` function and verify that it handles the NullPointerException properly.

7. **Scenario:** Validate that the function `get_id()` returns an empty string when `_id` is not set.
   **Test:** Do not set `_id`, call the `get_id()` function and check if an empty string is returned.

8. **Scenario:** Validate that the function `get_id()` returns a string.
   **Test:** Call the `get_id()` function and check if the returned value is an instance of String class.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Screen_get_id_c3fa75ed0b_Test {

    private Screen screen;

    @BeforeEach
    public void setUp() {
        screen = new Screen();
    }

    @Test
    public void testGetIdReturnsHexadecimalString() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        Assertions.assertTrue(screen.get_id().matches("-?[0-9a-fA-F]+"));
    }

    @Test
    public void testGetIdReturnsCorrectId() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        Assertions.assertEquals(objectId.toHexString(), screen.get_id());
    }

    @Test
    public void testGetIdReturnsNonNullValue() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        Assertions.assertNotNull(screen.get_id());
    }

    @Test
    public void testGetIdReturnsUniqueIds() {
        ObjectId objectId1 = new ObjectId();
        ObjectId objectId2 = new ObjectId();
        screen.set_id(objectId1);
        String id1 = screen.get_id();
        screen.set_id(objectId2);
        String id2 = screen.get_id();
        Assertions.assertNotEquals(id1, id2);
    }

    @Test
    public void testGetIdReturnsIdOfCorrectLength() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        Assertions.assertEquals(24, screen.get_id().length());
    }

    @Test
    public void testGetIdHandlesNullProperly() {
        screen.set_id(null);
        Assertions.assertThrows(NullPointerException.class, () -> screen.get_id());
    }

    @Test
    public void testGetIdReturnsEmptyStringWhenIdNotSet() {
        Assertions.assertEquals("", screen.get_id());
    }

    @Test
    public void testGetIdReturnsString() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        Assertions.assertTrue(screen.get_id() instanceof String);
    }
}
