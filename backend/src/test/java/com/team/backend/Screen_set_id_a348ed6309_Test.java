// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. **Scenario 1:** Set a valid ObjectId and verify if it's correctly set
   - **Test Steps:** 
     - Create a new ObjectId
     - Call the set_id function with the created ObjectId
     - Verify that the _id has been correctly set
   - **Expected Result:** 
     - The _id should be equal to the ObjectId that was set

2. **Scenario 2:** Set an invalid ObjectId and verify if an error is thrown
   - **Test Steps:** 
     - Call the set_id function with an invalid ObjectId or null
   - **Expected Result:** 
     - The function should throw an error or exception

3. **Scenario 3:** Set an ObjectId when one already exists and verify if it's replaced
   - **Test Steps:** 
     - Create a new ObjectId and set it using the set_id function
     - Create another new ObjectId and set it using the set_id function
     - Verify that the _id has been replaced with the new ObjectId
   - **Expected Result:** 
     - The _id should be equal to the second ObjectId that was set

4. **Scenario 4:** Set the same ObjectId twice and verify if it remains the same
   - **Test Steps:** 
     - Create a new ObjectId and set it using the set_id function
     - Call the set_id function again with the same ObjectId
     - Verify that the _id remains the same
   - **Expected Result:** 
     - The _id should be equal to the ObjectId that was set

5. **Scenario 5:** Set a null ObjectId and verify if an error is thrown
   - **Test Steps:** 
     - Call the set_id function with a null ObjectId
   - **Expected Result:** 
     - The function should throw an error or exception

6. **Scenario 6:** Set a non-ObjectId object and verify if an error is thrown
   - **Test Steps:** 
     - Call the set_id function with a non-ObjectId object (like a String, integer, etc)
   - **Expected Result:** 
     - The function should throw an error or exception
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Screen_set_id_a348ed6309_Test {
    private Screen screen;

    @BeforeEach
    public void setUp() {
        screen = new Screen();
    }

    @Test
    public void testSetId_ValidObjectId() {
        ObjectId id = new ObjectId();
        screen.set_id(id);
        assertEquals(id, screen.get_id());
    }

    @Test
    public void testSetId_InvalidObjectId() {
        assertThrows(IllegalArgumentException.class, () -> {
            screen.set_id(null);
        });
    }

    @Test
    public void testSetId_ReplaceExistingObjectId() {
        ObjectId id1 = new ObjectId();
        screen.set_id(id1);
        ObjectId id2 = new ObjectId();
        screen.set_id(id2);
        assertEquals(id2, screen.get_id());
    }

    @Test
    public void testSetId_SameObjectIdTwice() {
        ObjectId id = new ObjectId();
        screen.set_id(id);
        screen.set_id(id);
        assertEquals(id, screen.get_id());
    }

    @Test
    public void testSetId_NullObjectId() {
        assertThrows(IllegalArgumentException.class, () -> {
            screen.set_id(null);
        });
    }

    @Test
    public void testSetId_NonObjectId() {
        assertThrows(ClassCastException.class, () -> {
            screen.set_id((ObjectId) new Object());
        });
    }
}
