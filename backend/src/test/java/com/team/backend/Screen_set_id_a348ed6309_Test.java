/*
Test generated by RoostGPT for test restAssuredVertexAi using AI Type Open AI and AI Model gpt-4

1. **Scenario 1:** Set a valid ObjectId and verify if it's correctly set
   - **Test Steps:** 
     - Create a new ObjectId
     - Call the set_id function with the created ObjectId
     - Verify if the _id has been correctly set
   - **Expected Result:** 
     - The _id should be equal to the ObjectId that was set

2. **Scenario 2:** Set an invalid ObjectId and verify if an error is thrown
   - **Test Steps:** 
     - Call the set_id function with an invalid ObjectId (null or any value that's not a valid ObjectId)
   - **Expected Result:** 
     - An error should be thrown indicating that the input is not a valid ObjectId

3. **Scenario 3:** Set a null ObjectId and verify if an error is thrown
   - **Test Steps:** 
     - Call the set_id function with null ObjectId
   - **Expected Result:** 
     - An error should be thrown indicating that the input is not a valid ObjectId

4. **Scenario 4:** Set an empty ObjectId and check if an error is thrown
   - **Test Steps:** 
     - Call the set_id function with an empty ObjectId
   - **Expected Result:** 
     - An error should be thrown indicating that the input is not a valid ObjectId

5. **Scenario 5:** Set a new ObjectId after an ObjectId has already been set and verify if the _id is updated
   - **Test Steps:** 
     - Create a new ObjectId and call the set_id function
     - Create another new ObjectId and call the set_id function again
     - Verify if the _id has been updated to the new ObjectId
   - **Expected Result:** 
     - The _id should be equal to the new ObjectId that was set

6. **Scenario 6:** Set the same ObjectId multiple times and verify if the _id remains the same
   - **Test Steps:** 
     - Create a new ObjectId and call the set_id function
     - Call the set_id function again with the same ObjectId
     - Verify if the _id remains the same
   - **Expected Result:** 
     - The _id should remain the same as the ObjectId that was set

7. **Scenario 7:** Check if ObjectId is immutable after setting it with set_id function
   - **Test Steps:** 
     - Create a new ObjectId and call the set_id function
     - Try to change the value of the set ObjectId
   - **Expected Result:** 
     - The ObjectId should remain the same, indicating it's immutable

These test scenarios cover a variety of cases, including normal operation, error conditions, and edge cases, to ensure the set_id function works as expected.
*/
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class Screen_set_id_a348ed6309_Test {
    private Screen screen;

    @BeforeEach
    public void setUp() {
        screen = new Screen();
    }

    @Test
    public void testSetIdValid() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        assertEquals(objectId, screen.get_id());
    }

    @Test
    public void testSetIdInvalid() {
        assertThrows(IllegalArgumentException.class, () -> {
            screen.set_id(new ObjectId("invalidObjectId"));
        });
    }

    @Test
    public void testSetIdNull() {
        assertThrows(NullPointerException.class, () -> {
            screen.set_id(null);
        });
    }

    @Test
    public void testSetIdEmpty() {
        assertThrows(IllegalArgumentException.class, () -> {
            screen.set_id(new ObjectId(""));
        });
    }

    @Test
    public void testSetIdUpdated() {
        ObjectId objectId1 = new ObjectId();
        screen.set_id(objectId1);
        ObjectId objectId2 = new ObjectId();
        screen.set_id(objectId2);
        assertEquals(objectId2, screen.get_id());
    }

    @Test
    public void testSetIdSame() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        screen.set_id(objectId);
        assertEquals(objectId, screen.get_id());
    }

    @Test
    public void testIdImmutable() {
        ObjectId objectId = new ObjectId();
        screen.set_id(objectId);
        objectId = new ObjectId();
        assertNotEquals(objectId, screen.get_id());
    }
}
