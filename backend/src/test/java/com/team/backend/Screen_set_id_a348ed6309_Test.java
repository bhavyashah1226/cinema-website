// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. **Scenario 1:** Set a valid ObjectId and verify if it's correctly set. In this scenario, we create a new ObjectId, set it using the `set_id` function, and then verify if the `_id` field correctly contains the new ObjectId.

2. **Scenario 2:** Set an `null` ObjectId and verify if it's correctly set. In this scenario, we set the `_id` field to `null` using the `set_id` function and then check if the `_id` field is indeed `null`.

3. **Scenario 3:** Set an ObjectId while another ObjectId is already set. In this scenario, we first set an ObjectId, then set a different ObjectId using the `set_id` function, and finally verify if the `_id` field contains the new ObjectId.

4. **Scenario 4:** Set an ObjectId that is identical to the current ObjectId. In this scenario, we set an ObjectId, then set the same ObjectId using the `set_id` function, and finally verify if the `_id` field still contains the original ObjectId.

5. **Scenario 5:** Set an ObjectId after the `_id` field has been set to `null`. In this scenario, we first set the `_id` field to `null`, then set an ObjectId using the `set_id` function, and finally verify if the `_id` field contains the new ObjectId. 

Remember to also verify that the function doesn't affect any other fields or properties in your class.
*/

// ********RoostGPT********
package com.team.backend;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Screen_set_id_a348ed6309_Test {
    private Screen screen;

    @BeforeEach
    public void setup() {
        screen = new Screen();
    }

    @Test
    public void testSetIdWithValidObjectId() {
        ObjectId id = new ObjectId();
        screen.set_id(id);
        assertEquals(id, screen._id);
    }

    @Test
    public void testSetIdWithNullObjectId() {
        screen.set_id(null);
        assertNull(screen._id);
    }

    @Test
    public void testSetIdWithNewObjectIdWhenOldIdIsAlreadySet() {
        ObjectId oldId = new ObjectId();
        screen.set_id(oldId);

        ObjectId newId = new ObjectId();
        screen.set_id(newId);

        assertEquals(newId, screen._id);
        assertNotEquals(oldId, screen._id);
    }

    @Test
    public void testSetIdWithSameObjectId() {
        ObjectId id = new ObjectId();
        screen.set_id(id);
        screen.set_id(id);

        assertEquals(id, screen._id);
    }

    @Test
    public void testSetIdWithValidObjectIdAfterNullSet() {
        screen.set_id(null);

        ObjectId id = new ObjectId();
        screen.set_id(id);

        assertEquals(id, screen._id);
    }
}
