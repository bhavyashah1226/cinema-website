// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /authorizations/{id}_delete for http method type DELETE in rest-assured framework

// RoostTestHash=cb128291e8

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Assert;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class authorizations_idDeleteTest {

    @Test
    public void authorizations_id_delete_Test() {

        RestAssured.baseURI = System.getenv("BASE_URL");
 
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/authorizations_id_delete.csv"))) { 
        
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");
            
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }
                
                Response response = given()
                .contentType(ContentType.JSON)
                .pathParam("id", map.get("id"))
                .when()
                .delete("/authorizations/{id}")
                .then() 
                .extract().response();
                
                int statusCode = response.statusCode();
               
                validateResponse(statusCode);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void validateResponse(int statusCode) {
    switch(statusCode) {
        case 200:
            System.out.println("Description: successful operation");
            break;
        case 400:
            System.out.println("Description: Bad Request");
            Assert.fail("Bad Request Returned");
            break;
        case 401:
            System.out.println("Description: Authentication Required");
            Assert.fail("Authentication Required Returned");
            break;
        default:
            System.out.println("Unexpected status code returned: " + statusCode);
            Assert.fail("Unexpected status code returned");
            break;
    }
  }
}
