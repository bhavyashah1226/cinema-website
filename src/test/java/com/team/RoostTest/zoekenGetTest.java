// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /kvk/zoeken_get for http method type GET in rest-assured framework

// RoostTestHash=2acea70323

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

public class ZoekenGetTest {

    private static final String BASE_URL = System.getenv("BASE_URL");

    @Test
    public void zoekenGetTest() throws IOException {
        RestAssured.baseURI = BASE_URL;

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/zoeken_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = getHeaderDataMap(headers, line);

                Response response = getResponse(map);

                assertEquals("Description: successful operation", 200, response.statusCode());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  
    private Map<String, String> getHeaderDataMap(String[] headers, String line) {
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }
  
    private Response getResponse(Map<String, String> map) {
        return given()
            .pathParam("kvkNummer", map.get("kvkNummer"))
            .pathParam("vestigingsnummer", map.get("vestigingsnummer"))
            .pathParam("handelsnaam", map.get("handelsnaam"))
            .when()
            .get("/kvk/zoeken")
            .then()
            .extract()
            .response();
    }
}
