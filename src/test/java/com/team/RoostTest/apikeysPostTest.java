// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=28a54f1579

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class apikeysPostTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test  
    public void apikeys_post_Test() throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/apikeys_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");
  
            String line;
            while ((line = reader.readLine()) != null) {
                // Create a map of header to data
                Map<String, String> map = createMap(line, headers);

                Response response = given().contentType(ContentType.JSON)
                        .body(map)
                        .when()
                        .post("/apikeys")
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }

    private Map<String, String> createMap(String line, String[] headers) {
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }

        return map;
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        
        switch(statusCode) {
            case 201:
                validateCreatedResponse(response);
                break;

            case 400:
                validateErrorResponse(response);
                break;

            case 401:
                validateUnauthorizedResponse(response);
                break;

            default:
                fail("Invalid status code: " + statusCode);
        }
    }

    private void validateCreatedResponse(Response response) {
        JsonPath jsonPath = new JsonPath(response.asString());
        assertTrue("Invalid ID", jsonPath.get("id").toString().matches("^\\d+$"));
        assertTrue("Invalid token", jsonPath.get("token").toString().matches("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));
        assertNotNull("Missing 'createdAt'", jsonPath.get("createdAt"));
    }

    private void validateErrorResponse(Response response) {
        JsonPath jsonPath = new JsonPath(response.asString());
        assertNotNull("Missing error message", jsonPath.get("message"));
        assertEquals("Unexpected error code", "400", jsonPath.get("errorCode"));
    }

    private void validateUnauthorizedResponse(Response response) {
        JsonPath jsonPath = new JsonPath(response.asString());
        assertNotNull("Missing error message", jsonPath.get("message"));
        assertEquals("Unexpected error code", "401", jsonPath.get("errorCode"));
    }
}
