// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /apikeys_post for http method type POST in rest-assured framework

// RoostTestHash=28a54f1579

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.junit.Test;
import org.hamcrest.MatcherAssert;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class ApiKeysPostTest {

    @Test
    public void apikeys_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try(BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/apikeys_post.csv"))) {

            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = 
                    given()
                        .contentType(ContentType.JSON)
                        .body(map)
                    .when()
                    .post("/apikeys")
                    .then() 
                        .extract()
                        .response();

                assertResponse(response);
            }
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    private void assertResponse(Response response) {
        int statusCode = response.statusCode();

        switch(statusCode) {
            case 201:
                System.out.println("Description: Successful operation");
                validate201Response(response);
                break;
            case 400:
                System.out.println("Description: Bad request");
                // Validate error response
                break;
            case 401:
                System.out.println("Description: Authentication required");
                // Validate unprocessable entity response
                break;
            default:
                fail("Unexpected status code: " + statusCode);
                break;
        }
    }

    private void validate201Response(Response response) {
        assertStringValue("id", response);
        assertUuidPattern("token", response);
        assertStringValue("createdAt", response);
    }

    private void assertStringValue(String field, Response response) {
        String value = response.jsonPath().getString(field);
        assertThat(value, notNullValue());
        assertThat(value, instanceOf(String.class));
    }

    private void assertUuidPattern(String field, Response response) {
        String value = response.jsonPath().getString(field);
        assertThat(value, notNullValue());
        assertThat(value, instanceOf(String.class));
        assertThat(value, matchesPattern("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));
    }
}
