// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=692c6b853f

package com.team.RoostTest;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;"
import java.nio.file.Paths;
import java.util.Map;
import java.util.HashMap;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import org.junit.Assert;

public class GrantsGetTest {

    private static final String CSV_FILE_PATH = Paths.get("src","test","java","com","team","RoostTest","grants_get.csv").toFile().getAbsolutePath();
    
    @Test
    public void testGrantsGet() {
        
        RestAssured.baseURI = System.getenv("BASE_URL");
        
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            
            // Create a map of header to data
            Map<String, String> map = new HashMap<>();
            String headerLine = reader.readLine();
            if(headerLine != null) {
                String[] headers = headerLine.split(",");
                String line;
                
                // Parse CSV data
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");
                    
                    for (int i = 0; i < headers.length; i++) {
                        map.put(headers[i], data[i]);
                    }

                    // OAuth2 authentication provides services with the means to manage secure access to protected resources.
                    given()
                    .auth().oauth2(map.get("TOKEN"))
                    .contentType(ContentType.JSON)
                    .when()
                    .get("/grants")
                    .then()
                    .statusCode(200)
                    .body("total", instanceOf(Integer.class))
                    .body("grants", hasSize(greaterThan(0)))
                    .body("grants.id", everyItem(instanceOf(String.class)))
                    .body("grants.token", everyItem(matchesPattern("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")))
                    .body("grants.createdAt", everyItem(instanceOf(String.class)))
                    .body("grants.updatedAt", everyItem(instanceOf(String.class)))
                    .body("grants.account.id", everyItem(instanceOf(String.class)))
                    .body("grants.account.name", everyItem(matchesPattern("^[\p{L} .'-]{1,100}$")))
                    .body("grants.account.image", everyItem(instanceOf(String.class)))
                    .body("grants.account.email", everyItem(matchesPattern("^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$")));
                }
            }
        } catch (IOException e) {
            Assert.fail("Failed to read CSV file: " + e.getMessage());
        }
    }  
}
