// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;

public class NobelPrizesGetTest{
    private String baseURL;

    @Before
    public void setup(){
        baseURL = System.getenv("BASE_URL");
        RestAssured.baseURI = baseURL;
    }
    
    @Test 
    public void testNobelPrizes(){
        try(BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv"))){
            String[] headers = reader.readLine().split(",");
            
            String line;
            while((line = reader.readLine()) != null){
                String[] data = line.split(",");
                
                Map<String, String> map = new HashMap<>();
                for( int i = 0; i < headers.length; i++){
                    map.put(headers[i], data[i]);
                }
                prepareAndExecuteRequest(map);
            }
        }catch(IOException e){
            e.printStackTrace();
        }
    }
    
    private void prepareAndExecuteRequest(Map<String, String> map){
        given()
            .contentType(ContentType.JSON)
            .queryParam("offset", map.get("offset"))
            .queryParam("limit", map.get("limit"))
            .queryParam("sort", map.get("sort"))
            .queryParam("nobelPrizeYear", map.get("nobelPrizeYear"))
            .queryParam("yearTo", map.get("yearTo"))
            .queryParam("nobelPrizeCategory", map.get("nobelPrizeCategory"))
            .queryParam("format", map.get("format"))
            .queryParam("csvLang", map.get("csvLang"))
            .when()
            .get("/nobelPrizes")
            .then()
            // You can add logic for assertions here.
            .log().ifValidationFails();
    }
    
    @After
    public void teardown(){
        RestAssured.reset();
    }
}
