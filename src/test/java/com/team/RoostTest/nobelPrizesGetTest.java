// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class NobelPrizesGetTest {

    private static final String BASE_URL = System.getenv("BASE_URL");

    @Before
    public void setUp() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void nobelPrizesGetTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader(
                "src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv"))) {
            String[] headers = reader.readLine().split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = convertLineToMap(line, headers);

                Response response = makeGetRequestToNobelPrizes(map);

                int statusCode = response.statusCode();
                switch (statusCode) {
                    case 200:
                        validateSuccessfulResponse(response);
                        break;
                    case 400:
                    case 404:
                    case 422:
                        validateErrorResponse(response);
                        break;
                    default:
                        throw new RuntimeException("Unexpected status code: " + statusCode);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> convertLineToMap(String line, String[] headers) {
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++)
            map.put(headers[i], data[i]);
        return map;
    }

    private Response makeGetRequestToNobelPrizes(Map<String, String> map) {
        return given()
				.pathParams(map)
                .when()
                .get("/nobelPrizes")
                .then()
                .contentType(ContentType.JSON)
                .extract().response();
    }

    private void validateSuccessfulResponse(Response response) {
        //fill in the actual structure of the response
        response.then()
                .body("nobelPrizes", hasSize(greaterThan(0)))
                ...
    }

    private void validateErrorResponse(Response response) {
        //fill in the actual structure of the error response
        response.then()
                .body("code", notNullValue())
                .body("message", notNullValue())
                ...
    }
}
