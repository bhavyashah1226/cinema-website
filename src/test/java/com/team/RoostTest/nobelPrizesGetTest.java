// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class nobelPrizesGetTest {

    @Test
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("offset", map.get("offset"))
                        .pathParam("limit", map.get("limit"))
                        .pathParam("sort", map.get("sort"))
                        .pathParam("nobelPrizeYear", map.get("nobelPrizeYear"))
                        .pathParam("yearTo", map.get("yearTo"))
                        .pathParam("nobelPrizeCategory", map.get("nobelPrizeCategory"))
                        .pathParam("format", map.get("format"))
                        .pathParam("csvLang", map.get("csvLang"))
                        .when()
                        .get("/nobelPrizes")
                        .then().extract().response();

                validateResponseForStatus200(response);
                validateResponseForStatus400(response);
                validateResponseForStatus404(response);
                validateResponseForStatus422(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateResponseForStatus200(Response response) {
        if (response.getStatusCode() != 200) return;

         // simplify your logic to handle 200 response which will also reduce the line of code
    }

    private void validateResponseForStatus400(Response response) {
        if (response.getStatusCode() != 400) return;

        // simplify your logic to handle 400 response which will also reduce the line of code
    }

    private void validateResponseForStatus404(Response response) {
        if (response.getStatusCode() != 404) return;

         // simplify your logic to handle 404 response will also reduce the line of code
    }

    private void validateResponseForStatus422(Response response) {
        if (response.getStatusCode() != 422) return;

        // simplify your logic to handle 422 response will also reduce the line of code
    }
}
