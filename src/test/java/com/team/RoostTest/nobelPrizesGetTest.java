// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class NobelPrizesGetTest {

    @Test
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> params = parseLineToMap(headers, line.split(","));

                Response response = sendGetRequest(params);
                validateResponseBasedOnStatusCode(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> parseLineToMap(String[] keys, String[] values) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < keys.length; i++) {
            map.put(keys[i], values[i]);
        }
        return map;
    }

    private Response sendGetRequest(Map<String, String> params) {
        return given()
                .pathParams(params)
                .when()
                .get("/nobelPrizes")
                .then()
                .extract().response();
    }

    private void validateResponseBasedOnStatusCode(Response response) {
        switch (response.statusCode()) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().getList("nobelPrizes"), is(notNullValue()));
        /* Add more assertions */
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.jsonPath().get("code"), is("ERR_BAD_REQUEST"));
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
        /* Add more assertions */
    }

    private void validateNotFoundResponse(Response response) {
        assertThat(response.jsonPath().get("code"), is("ERR_NOT_FOUND"));
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
        /* Add more assertions */
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.jsonPath().get("code"), is("ERR_UNPROCESSABLE_ENTITY"));
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
        /* Add more assertions */
    }
}
