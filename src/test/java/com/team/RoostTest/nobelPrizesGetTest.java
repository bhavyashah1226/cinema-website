// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import org.apache.http.HttpStatus;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.*;

public class NobelPrizesGetTest {

    @Test  
    public void getNobelPrizes() {  
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/nobelPrizes_get.csv"))) {  
            
            String[] headers = reader.readLine().split(",");
  
            String line;
            while ((line = reader.readLine()) != null) {
  
                Map<String, String> params = createParamsMap(headers, line.split(","));

                Response response = requestNobelPrizes(params);
                validateResponse(response);
            }
      
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
   
    private Map<String, String> createParamsMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }

        return map;
    }

    private Response requestNobelPrizes(Map<String, String> params) {
        return given()
            .queryParams(params)
            .when()
            .get("/nobelPrizes")
            .thenReturn();
    }

    private void validateResponse(Response response) {
        int statusCode = response.getStatusCode();

        switch (statusCode) {
            case HttpStatus.SC_OK:
                validate200Response(response);
                break;
            case HttpStatus.SC_BAD_REQUEST:
            case HttpStatus.SC_NOT_FOUND:
            case HttpStatus.SC_UNPROCESSABLE_ENTITY:
                validateErrorResponse(response, statusCode);
                break;
            default:
                fail("Unexpected HTTP status code: " + statusCode);
        }
    }

    private void validate200Response(Response response) {
        assertThat(response.jsonPath().getList("nobelPrizes"), instanceOf(List.class));

        // Add other response checks here...
    }

    private void validateErrorResponse(Response response, int statusCode) {
        assertThat(response.jsonPath().getString("code"), equalTo(String.valueOf(statusCode)));
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));

        // Add other error checks here...
    }
}
