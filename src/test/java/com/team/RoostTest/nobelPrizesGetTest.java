// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class NobelPrizesGetTest {
   
    @Test  
    public void testNobelPrizesGet() {  
      
        RestAssured.baseURI = System.getenv("BASE_URL");  
        
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/nobelPrizes_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
  
                String[] data = line.split(",");  
                Map<String, String> map = new HashMap<>();  
                for (int index = 0; index < headers.length; index++) {  
                    map.put(headers[index], data[index]);  
                }  
  
                Response response = given()
                .pathParams(map)
                .get("/nobelPrizes")  
                .then() 
                .extract().response(); 
                
                if (response.statusCode() == 200) {
                    validateNobelPrizesData(response);  
                } 
                else
                {
                    validateErrorResponses(response);
                } 
                assertThat(response.statusCode(), anyOf(equalTo(200), equalTo(400), equalTo(404), equalTo(422)));
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private void validateNobelPrizesData(Response response) {
        // Add your validations for the NobelPrizesData here
    }
    private void validateErrorResponses(Response response) {
        // Add your validations for the ErrorResponses here
    }
}
