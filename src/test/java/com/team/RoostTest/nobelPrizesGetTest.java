// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class nobelPrizesGetTest {
  
  private static final String BASE_URL = System.getenv("BASE_URL");

  @Test  
  public void nobelPrizes_get_Test() {  
    RestAssured.baseURI = BASE_URL;  

    try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv"))) {
        String headerLine = reader.readLine();  
        String[] headers = headerLine.split(",");  

        String line;  
        while ((line = reader.readLine()) != null) {  
            String[] data = line.split(",");  
            Map<String, String> map = createMapFromData(headers, data);
            Response response = createRequestandGetResponse(map);
            validateResponse(response);
        }
    } catch (IOException e) {  
        e.printStackTrace();  
    }  
  }

  private Map<String, String> createMapFromData(String[] headers, String[] data) {
    // Create a map of headers to data  
    Map<String, String> map = new HashMap<>();  
    for (int i = 0; i < headers.length; i++) { 
      map.put(headers[i], data[i]);  
    }
    return map;
  }

  private Response createRequestandGetResponse(Map<String, String> map) {
    return given()
        .pathParams(map)
        .contentType(ContentType.JSON)
        .when()
        .get("/nobelPrizes")
        .then() 
        .extract().response();
  }

  private void validateResponse(Response response) {
    assertEquals(200, response.getStatusCode());
    List<Object> nobelPrizes = response.jsonPath().getList("nobelPrizes");
    assertNotNull(nobelPrizes);

    // Continue with your validations...
  }
}
