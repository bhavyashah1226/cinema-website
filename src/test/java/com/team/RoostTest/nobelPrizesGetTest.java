// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import org.hamcrest.MatcherAssert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class nobelPrizesGetTest {
    
    //base setup
    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }
    
    //function to read CSV files
    Map<String, String> readCSVFile() throws IOException {
        Map<String, String> map = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/nobelPrizes_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }
            }
        }
        return map;
    }
   
    // one common function to assert all the status code 
    void handleStatusCode(Response response) {
        switch (response.statusCode()) {
            case 200:
                handleSuccessResponse(response);
                break;
            case 422:
            case 404:
            case 400:
                handleErrorResponse(response);
                break;
            default:
                fail("Unhandled HTTP Response Status Code: " + response.statusCode() + ". Please add case for it.");
        }
    }

    void handleErrorResponse(Response response) {
        assertNotNull(response.jsonPath().get("code"));
        assertThat(response.jsonPath().get("code"), instanceOf(String.class));
        assertNotNull(response.jsonPath().get("message"));
        assertThat(response.jsonPath().get("message"), instanceOf(String.class));
    }

    void handleSuccessResponse(Response response) {
        //Handle all the checking in success response here; 
        //for example checking jsonPath
        //assertThat(response.jsonPath().get("awardedPrize.prizeAmount"), instanceOf(Integer.class));  
    }
    
    @Test
    public void nobelPrizes_get_Test() throws IOException {  
        Map<String, String> fileData = readCSVFile();

        // Create the response
        Response response = given()
				.pathParams(fileData)
                .when()
                .get("/nobelPrizes")  
                .then() 
                .extract().response();  

        handleStatusCode(response);
     } 
}

