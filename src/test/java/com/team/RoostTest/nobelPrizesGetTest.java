// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class nobelPrizesGetTest {

    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_FILE_PATH = "src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv";

    @Test  
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = BASE_URL;

        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String line;
            String[] headers = reader.readLine().split(",");

            while ((line = reader.readLine()) != null) {
                Map<String, String> map = createRequestMap(line.split(","), headers);

                Response response = given()
                    .pathParams(map)
                    .when()
                    .get("/nobelPrizes")
                    .then()
                    .extract().response();

                switch (response.statusCode()) {
                    case 200: validateSuccessResponse(response); break;
                    case 400: validateErrorResponse(response); break;
                    case 404: validateNotFoundResponse(response); break;
                    case 422: validateUnprocessableEntityResponse(response); break;
                    default: throw new IllegalStateException("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            throw new RuntimeException("Error reading from CSV file", e);
        }
    }

    private Map<String, String> createRequestMap(String[] data, String[] headers) {
        Map<String, String> map = new HashMap<>();

        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }

        return map;
    }

    private void validateSuccessResponse(Response response) {
        MatcherAssert.assertThat(response.jsonPath().getList("nobelPrizes"), instanceOf(List.class));
        // Your further validations go here
    }

    private void validateErrorResponse(Response response) {
        MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));
        MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));
        // Your further validations go here
    }

    private void validateNotFoundResponse(Response response) {
        MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));
        MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));
        // Your further validations go here
    }

    private void validateUnprocessableEntityResponse(Response response) {
        MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));
        MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));
        // Your further validations go here
    }
}
