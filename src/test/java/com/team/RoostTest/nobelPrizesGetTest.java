// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class nobelPrizesGetTest {

    @Test
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/nobelPrizes_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> dataMap = mapDataToHeaders(line, headers);
                Response response = fireGetRequest(dataMap);
                handleResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> mapDataToHeaders(String line, String[] headers) {
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response fireGetRequest(Map<String, String> map) {
        return RestAssured
                .given()
                .contentType(ContentType.JSON)
                .params(map)
                .when()
                .get("/nobelPrizes")
                .then()
                .extract()
                .response();
    }

    private void handleResponse(Response response) {
        int statusCode = response.statusCode();
        assertThat(statusCode, anyOf(equalTo(200), equalTo(400), equalTo(404), equalTo(422)));
        switch (statusCode) {
            // handle logic for each status code..
            case 200:
                // success case
                // assert fields..
                break;
            case 400:
                // error case
                // assert fields..
                break;
            case 404:
                // not found case
                // assert fields..
                break;
            case 422:
                // validation failure case
                // assert fields..
                break;
            default:
                break;
        }
    }
}
