// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /nobelPrizes_get for http method type GET in rest-assured framework

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class NobelPrizesGetTest {

    @Test
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");
        String csvPath = "src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv";

        try (BufferedReader reader = new BufferedReader(new FileReader(csvPath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("offset", map.get("offset"))
                        .pathParam("limit", map.get("limit"))
                        .when()
                        .get("/nobelPrizes")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        // Successful call
                        System.out.println("Successful call of Nobel Prize(s) according to the filled fields");
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        // Bad request
                        System.out.println("Bad request - malformed syntax.");
                        validateErrorResponse(response);
                        break;
                    case 404:
                        // Not Found
                        System.out.println("Not Found. Resource may be available again in the future.");
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        // Unprocessable Entity
                        System.out.println("Unprocessable Entity - semantic errors.");
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        System.out.println("Unexpected response code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessResponse(Response response) {
        // Add success response specific assertions here
    }

    private void validateErrorResponse(Response response) {
        response.then().body("code", equalTo("400"));
        response.then().body("message", equalTo("Bad Request"));
    }

    private void validateNotFoundResponse(Response response) {
        response.then().body("code", equalTo("404"));
        response.then().body("message", equalTo("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().body("code", equalTo("422"));
        response.then().body("message", equalTo("Unprocessable Entity"));
    }
}
