// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class nobelPrizesGetTest {

    @BeforeEach
    public void setUp() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void should_get_nobel_prizes() {
        // Read CSV data
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/nobelPrizes_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }
                validateResponse(getNobelPrizes(map));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Response getNobelPrizes(Map<String, String> map) {
        return given()
                .contentType(ContentType.JSON)
                .queryParams(map)
                .when()
                .get("/nobelPrizes")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
        }
    }

    private void validateSuccessResponse(Response response) {
        // If the status code is 200, add assertions based on the success response structure here.
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.jsonPath().getString("code"), is(notNullValue()));
        assertThat(response.jsonPath().getString("message"), is(notNullValue()));
    }

    private void validateNotFoundResponse(Response response) {
        assertThat(response.jsonPath().getString("code"), is(notNullValue()));
        assertThat(response.jsonPath().getString("message"), is(notNullValue()));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.jsonPath().getString("code"), is(notNullValue()));
        assertThat(response.jsonPath().getString("message"), is(notNullValue()));
    }
}
