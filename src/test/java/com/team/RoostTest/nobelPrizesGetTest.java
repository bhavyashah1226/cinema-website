// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.hamcrest.MatcherAssert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.io.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class nobelPrizesGetTest {

    private static final String CSV_FILE = 
        "src/test/java/com/team/RoostTest/nobelPrizes_get.csv";
    private static final String BASE_URL = System.getenv("BASE_URL");

    @Test
    public void nobelPrizes_get_Test() {

	RestAssured.baseURI = BASE_URL;

	try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE))) {

	    String[] headers = reader.readLine().split(",");

	    String line;
	    while ((line = reader.readLine()) != null) {
		String[] data = line.split(",");

		// Create a map of header to data
		Map<String, String> map = new HashMap<>();
		for (int i = 0; i < headers.length; i++) {
		    map.put(headers[i], data[i]);
		}

		Response response = given()
		    .queryParams(map)
		    .when()
		    .get("/nobelPrizes")
		    .then()
		    .contentType(ContentType.JSON)
		    .extract()
		    .response();
		
		JsonPath jsonPath = response.jsonPath();

		switch (response.statusCode()) {

		case 200:
		    validate200Response(jsonPath);
		    break;

		case 400: 
		case 404: 
		case 422:
		    validateErrorResponses(response.statusCode(), jsonPath);
		    break;

		default:
		    Assertions.fail("Unexpected status code : " + response.statusCode());

		}
	    }
	} catch (IOException e) {
	    System.err.println("Exception while reading csv file :" + e.getMessage());
	}
    }

    private void validate200Response(JsonPath jsonPath) {

	// Implement your assertions for 200 response

    }

    private void validateErrorResponses(int statusCode, JsonPath jsonPath) {
	MatcherAssert.assertThat(jsonPath.get("code"), instanceOf(Integer.class));
	MatcherAssert.assertThat(jsonPath.get("message"), instanceOf(String.class));
    }	
}
