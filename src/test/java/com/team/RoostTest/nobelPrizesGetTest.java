// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4940f5c55b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.Assert.assertEquals;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NobelPrizesGetTest {
  
    @Test  
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");  

        // Iterate over data in CSV file  
        setDataFromCSV().forEach((map) -> {
            Response response = requestNobelPrizes(map);

            // Validate response based on status code
            switch(response.statusCode()) {
                case 200:
                    validateSuccessResponse(response);
                    break;
                case 400:
                    validateErrorResponse(response);
                    break;
                case 404:
                    validateNotFoundResponse(response);
                    break;
                case 422:
                    validateUnprocessableEntityResponse(response);
                    break;
                default:
                    break;
            }
        });
    }

    private Map<String, String> setDataFromCSV(){
        Map<String, String> map = new HashMap<>();  

        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\nobelPrizes_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  

            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  

                // Create a map of header to data  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
            }
        } catch (IOException e) {  
            e.printStackTrace();  
        }
        return map;
    }

    private Response requestNobelPrizes(Map<String, String> map){
        return given()
            .queryParams(map)
            .when()
            .get("/nobelPrizes")  
            .then() 
            .extract().response();
    }

    private void validateSuccessResponse(Response response){
        //Assertions for expected structures and values in Success (200) Response
    }

    private void validateErrorResponse(Response response){
        //Assertions for expected structures and values in Error (400) Response
        assertEquals(instanceOf(Integer.class), response.jsonPath().get("code"));
        assertEquals(instanceOf(String.class), response.jsonPath().get("message"));
    }

    private void validateNotFoundResponse(Response response){
        //Assertions for expected structures and values in Not Found (404) Response
        assertEquals(instanceOf(Integer.class), response.jsonPath().get("code"));
        assertEquals(instanceOf(String.class), response.jsonPath().get("message"));
    }

    private void validateUnprocessableEntityResponse(Response response){
        //Assertions for expected structures and values in Unprocessable Validation Error (422) Response
        assertEquals(instanceOf(Integer.class), response.jsonPath().get("code"));
        assertEquals(instanceOf(String.class), response.jsonPath().get("message"));
    }
}
