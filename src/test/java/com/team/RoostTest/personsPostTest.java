// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /recipients/persons_post for http method type POST in rest-assured framework

// RoostTestHash=b4614c0581

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class PersonsPostTest {

    @Test
    public void personsPostTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader(
                "src/test/java/com/team/RoostTest/persons_post.csv"))) {
            setupCsvData(reader);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void setupCsvData(BufferedReader reader) throws IOException {
        String[] headers = reader.readLine().split(",");

        String line;
        while ((line = reader.readLine()) != null) {
            Map<String, String> db = createMap(headers, line.split(","));

            Response response = sendRequest(db);
            validateResponse(response);
        }
    }

    private Map<String, String> createMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response sendRequest(Map<String, String> map) {
        return given()
                .contentType(ContentType.JSON)
                .body(map)
                .when()
                .post("/recipients/persons")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();

        if (statusCode == 201) {
            assertSuccessfulResponse(response);
        } else if (statusCode == 400) {
            System.out.println("Description: Bad Request");
        } else if (statusCode == 401) {
            System.out.println("Description: Authentication Required");
        }
    }

    private void assertSuccessfulResponse(Response response) {
        assertThat(response.jsonPath().getString("id"), notNullValue());
        assertThat(response.jsonPath().getString("initials"), matchesPattern("^[A-Z]{1,6}$"));
        assertThat(response.jsonPath().getString("firstName"), matchesPattern("^[\p{L} .'-]{1,50}$"));
        assertThat(response.jsonPath().getString("middleName"), matchesPattern("^[\p{L} .'-]{1,20}$"));
        assertThat(response.jsonPath().getString("lastName"), matchesPattern("^[\p{L} .'-]{2,50}$"));
        assertThat(response.jsonPath().getString("birthDate"), notNullValue());
        assertThat(response.jsonPath().getString("birthPlace"), matchesPattern("^[\p{L} .,'-]{2,100}$"));
        assertThat(response.jsonPath().getString("phone"), notNullValue());
        assertThat(response.jsonPath().getString("email"), matchesPattern("^(^[^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"));
        assertThat(response.jsonPath().getString("postalCode"), matchesPattern("^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$"));
        assertThat(response.jsonPath().getString("houseNumber"), matchesPattern("^\\d{1,6}$"));
        assertThat(response.jsonPath().getString("houseNumberPostfix"), matchesPattern("^[a-zA-Z .,_'-]{0,20}$"));
        assertThat(response.jsonPath().getString("countryCode"), matchesPattern("^[A-Z]{2}$"));
        assertThat(response.jsonPath().getString("reference"), lessThanOrEqualTo(100));
        assertThat(response.jsonPath().getString("createdAt"), notNullValue());
        assertThat(response.jsonPath().getString("updatedAt"), notNullValue());
    }
}
