// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=1ce4bf6e3c

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import org.junit.Assert;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;

public class branches_idDeleteTest {

    private void validateSuccessResponse(Response response) {
        Assert.assertEquals("Response status not as expected", 200, response.statusCode());
        System.out.println("Description: successful operation");
    }

    private void validateBadRequestResponse(Response response) {
        Assert.assertEquals("Response status not as expected", 400, response.statusCode());
        System.out.println("Description: Bad Request");
    }

    private void validateUnauthenticatedResponse(Response response) {
        Assert.assertEquals("Response status not as expected", 401, response.statusCode());
        System.out.println("Description: Authentication Required");
    }

    @Test
    public void branches_id_delete_Test() throws IOException {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\branches_id_delete.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  

                Response response = given()
				.pathParam("id", map.get("id"))
                .when()
                .delete("/recipients/branches/{id}")  
                .then() 
                .extract().response();  

                // validate response
                switch (response.getStatusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateBadRequestResponse(response);
                        break;
                    case 401:
                        validateUnauthenticatedResponse(response);
                        break;
                    default:
                        Assert.fail("Unexpected status code");
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
