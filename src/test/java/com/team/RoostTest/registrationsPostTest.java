// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=0973c499e9

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class registrationsPostTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test  
    public void registrations_post_Test() {  
    
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src\test\java\com\team\RoostTest\registrations_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");
                
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
  
                executePostRegAPI(map);
            }
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    public void executePostRegAPI(Map<String,String> map) {
        Response response = given()
            .pathParam("id", map.get("id"))
            .contentType(ContentType.JSON)
            .body("{\"reference\":\"" + map.get("reference") + "\",\"startDate\":\"" + map.get("startDate") + "\",\"endDate\":\"" + map.get("endDate") + "\",\"credentialUrl\":\"" + map.get("credentialUrl") + "\"}")
            .when()
            .post("/recipients/persons/{id}/registrations");

        switch (response.statusCode()) {
            case 201:
                validateSuccessResponse(response);
                break;

            case 400:
                validateErrorResponse(response);
                break;

            case 401:
                validateAuthRequiredResponse(response);
                break;

            default:
                fail("Unexpected status code: " + response.statusCode());
        }
    }

    private void validateSuccessResponse(Response response) {
        // Sample assertions, more can be added based on response structure and requirements
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().get("reference"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("reference").length(), lessThanOrEqualTo(100));
        assertThat(response.jsonPath().get("startDate"), instanceOf(String.class));
        assertThat(response.jsonPath().get("endDate"), instanceOf(String.class));
        assertThat(response.jsonPath().get("status"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("credentialUrl"), matchesPattern("^\w+:(\/?\/?)[^\s]+$"));
        assertThat(response.jsonPath().get("credentialUrl"), instanceOf(String.class));
    }

    private void validateErrorResponse(Response response) {
        // Assertion logic for 400 status code, should be based on the actual error response structure
        assertThat(response.jsonPath().get("error"), is(notNullValue())); // Ensure there's an error message
    }

    private void validateAuthRequiredResponse(Response response) {
        // Assertion logic for 401 status code, should be based on the actual error response structure
        assertThat(response.jsonPath().get("error"), equalTo("Authentication Required")); // Ensure the error message denotes authentication error
    }
}
