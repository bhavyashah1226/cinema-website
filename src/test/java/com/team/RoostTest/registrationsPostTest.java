// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /recipients/persons/{id}/registrations_post for http method type POST in rest-assured framework

// RoostTestHash=0973c499e9

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Assert;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class registrationsPostTest {

    private static final int MAX_REFERENCE_LENGTH = 100;

    @Test
    public void registrations_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Reading CSV File
        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\registrations_post.csv"))) {

            String[] headers = reader.readLine().split(",");
            String line;

            while ((line = reader.readLine()) != null) {

                Map<String, String> map = createMapFromData(headers, line.split(","));

                Response response = given()
                        .pathParam("id", map.get("id"))
                        .contentType(ContentType.JSON)
                        .body(createRequestBody(map))
                        .when()
                        .post("/recipients/persons/{id}/registrations")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 400:
                        Assert.fail("Bad Request");
                        break;
                    case 401:
                        Assert.fail("Authentication Required");
                        break;
                    case 201:
                        validateCreatedResponse(response);
                        break;
                    default:
                        Assert.fail("Unexpected response code: " + response.statusCode());
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private HashMap<String, String> createMapFromData(String[] headers, String[] data){
        HashMap<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++){
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private String createRequestBody(Map<String, String> map){
        return "{\n" +
                "  \"reference\": \"" + map.get("reference") + "\",\n" +
                "  \"startDate\": \"" + map.get("startDate") + "\",\n" +
                "  \"endDate\": \"" + map.get("endDate") + "\",\n" +
                "  \"credentialUrl\": \"" + map.get("credentialUrl") + "\"\n" +
                "}";
    }

    private void validateCreatedResponse(Response response){
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().get("reference"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("reference").length(), lessThanOrEqualTo(MAX_REFERENCE_LENGTH));
        assertThat(response.jsonPath().get("startDate"), instanceOf(String.class));
        assertThat(response.jsonPath().get("endDate"), instanceOf(String.class));
        assertThat(response.jsonPath().get("status"), instanceOf(String.class));
        assertThat("^\\w+:(\\/\\/)[^\\s]+$", is(response.jsonPath().getString("credentialUrl")));
        assertThat(response.jsonPath().get("suspendedUntil"), instanceOf(String.class));
        assertThat(response.jsonPath().get("issuedAt"), instanceOf(String.class));
        assertThat(response.jsonPath().get("createdAt"), instanceOf(String.class));
        assertThat(response.jsonPath().get("updatedAt"), instanceOf(String.class));
    }
}
  