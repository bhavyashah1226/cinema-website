// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=018c225aea

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class credentials_idGetTest {

    @Test  
    public void credentials_id_get_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\credentials_id_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  

                Response response = given()
				        .pathParam("id", map.get("id"))
                        .when()
                        .get("/credentials/{id}")  
                        .then() 
                        .extract().response();    

                validateResponse(response);
            }  
        } catch (IOException e) {  
            System.out.println("An error occurred during the test: " + e.getMessage());
            assertNull("An error occurred during the test:" + e.getMessage(), e);  
        }  
    }

    void validateResponse(Response response){
        switch (response.getStatusCode()){
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateBadRequestResponse(response);
                break;
            case 401:
                validateAuthRequiredResponse(response);
                break;
            default:
                fail("Unexpected status code received: " + response.getStatusCode());
                break;
        }
    }

    void validateSuccessResponse(Response response){
        assertNotNull("Id is null", response.jsonPath().get("id"));
        assertNotNull("Format is null", response.jsonPath().get("format"));
        assertThat(response.jsonPath().getString("format"), anyOf(equalTo("jwt_vc_json"), equalTo("jwt_vc_json-ld"), equalTo("ldp_vc")));
        assertNotNull("Credential is null", response.jsonPath().get("credential"));
        assertNotNull("Status is null", response.jsonPath().get("status"));
        assertThat(response.jsonPath().getString("status"), anyOf(equalTo("active"), equalTo("suspended"), equalTo("revoked"), equalTo("expired"), equalTo("pending")));
        assertNotNull("Status Updated At is null", response.jsonPath().get("statusUpdatedAt"));
        assertNotNull("Created At is null", response.jsonPath().get("createdAt"));
    }

    void validateBadRequestResponse(Response response){
        // Add assertions validating the structure for 400 status code
        fail("Bad request. Message: " + response.jsonPath().get("message"));
    }

    void validateAuthRequiredResponse(Response response){
        // Add assertions validating the structure for 401 status code
        fail("Authentication required. Message: " + response.jsonPath().get("message"));
    }
}
