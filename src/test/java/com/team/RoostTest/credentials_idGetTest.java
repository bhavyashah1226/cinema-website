// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /credentials/{id}_get for http method type GET in rest-assured framework

// RoostTestHash=018c225aea

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class credentials_idGetTest {

    @Test
    public void credentials_id_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/credentials_id_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = new HashMap<>();
                try {
                    String[] data = line.split(",");
                    for (int i = 0; i < headers.length; i++) {
                        map.put(headers[i], data[i]);
                    }

                    Response response = given()
                            .contentType(ContentType.JSON)
                            .pathParam("id", map.get("id"))
                            .when()
                            .get("/credentials/{id}")
                            .then()
                            .extract()
                            .response();

                    switch (response.statusCode()) {
                        case 200:
                            validateSuccessResponse(response);
                            break;
                        case 400:
                            Assertions.fail("Bad Request!");
                            break;
                        case 401:
                            Assertions.fail("Authentication Required!");
                            break;
                        default:
                            Assertions.fail("Invalid response code: " + response.statusCode());
                            break;
                    }

                } catch (Exception e) {
                    System.out.println("Exception at row: " + map.get("id") + "; Message: " + e.getMessage());
                    throw e;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            Assertions.fail("Test data file not found!");
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat("Invalid id in response!", response.jsonPath().get("id"), is(notNullValue()));
        assertThat("Invalid format in response!", response.jsonPath().get("format"), anyOf(equalTo("jwt_vc_json"), equalTo("jwt_vc_json-ld"), equalTo("ldp_vc")));
        assertThat("Invalid credential in response!", response.jsonPath().get("credential"), is(notNullValue()));
        assertThat("Invalid status in response!", response.jsonPath().get("status"), anyOf(equalTo("active"), equalTo("suspended"), equalTo("revoked"), equalTo("expired"), equalTo("pending")));
        assertThat("Invalid statusUpdatedAt in response!", response.jsonPath().get("statusUpdatedAt"), is(notNullValue()));
        assertThat("Invalid createdAt in response!", response.jsonPath().get("createdAt"), is(notNullValue()));
    }
}
