// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /apikeys_get for http method type GET in rest-assured framework

// RoostTestHash=9e57a3b0dd

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import org.apache.commons.lang3.StringUtils;
import java.io.*;
import java.util.*;

public class apikeysGetTest {
    private static final String CSV_FILE = "src/test/java/com/team/RoostTest/apikeys_get.csv";
    private static final String BASE_URL = "BASE_URL";
    private static final String API_KEYS = "apikeys";
    private static final int OK = 200;
    private static final int BAD_REQUEST = 400;
    private static final int UNAUTHORIZED = 401;

    @Test
    public void apikeys_get_Test() {
        RestAssured.baseURI = System.getenv(BASE_URL);
   
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE))) {
            String[] headers = reader.readLine().split(",");
            String line;

            while ((line = reader.readLine()) != null) {
                Map<String, String> map = createMap(headers, line.split(","));

                Response response = getRequestResponse("/apikeys");
                int statusCode = response.getStatusCode();

                if (statusCode == OK) {
                    validateOKResponse(response);
                }
                else if (statusCode == BAD_REQUEST || statusCode == UNAUTHORIZED) {
                    printErrorMessage(statusCode);
                }
                else {
                    readErrorResponse(response);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Response getRequestResponse(String basePath){
        return given()
                .when()
                .get(basePath)
                .then()
                .extract().response();
    }

    private void printErrorMessage(int statusCode){
        String message = "";
        if(statusCode == BAD_REQUEST) {
            message = "Description: Bad Request";
        }
        else if (statusCode == UNAUTHORIZED){
            message = "Description: Authentication Required";
        }
        System.out.println(message);
    }

    private void validateOKResponse(Response response){
        System.out.println("Description: successful operation");

        Integer total = response.jsonPath().get("total");
        List<String> ids = response.jsonPath().getList(API_KEYS+".id");
        List<String> createdDates = response.jsonPath().getList(API_KEYS+".createdAt");

        if (total != null) {
            assertDataType(total, Integer.class);
        }

        if (ids != null) {
            assertDataType(ids, String.class);
            assertNonEmptyString(ids);
        }

        if (createdDates != null) {
            assertDataType(createdDates, String.class);
            assertNonEmptyString(createdDates);
        }
    }

    private void assertDataType(Object object, Class clazz){
        assertThat(object, instanceOf(clazz));
    }

    private void assertNonEmptyString(List<String> list){
        for(String str: list){
            assertThat(StringUtils.isNotBlank(str), is(true));
        }
    }

    private Map<String, String> createMap(String[] keys, String[] values){
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < keys.length; i++) {
            map.put(keys[i], values[i]);
        }
        return map;
   }

   private void readErrorResponse(Response response){
       // implement specific logic according to response structure
   }
}
