// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=6ec067b2e9

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.fail;

public class RegistrationsGetTest {

    @Test
    public void registrations_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\registrations_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = headersToDataMap(headers, data);

                Response response = given()
                        .contentType(ContentType.JSON)
                        .pathParam("size", map.get("size"))
                        .pathParam("offset", map.get("offset"))
                        .pathParam("recipient-id", map.get("recipient-id"))
                        .pathParam("credential-url", map.get("credential-url"))
                        .when()
                        .get("/registrations")
                        .then().extract().response();


                if (response.statusCode() == 200) {
                    checkSuccessfulResponse(response);
                } else if (response.statusCode() == 400) {
                    validateErrorResponse(response);
                } else if (response.statusCode() == 404) {
                    validateNotFoundResponse(response);
                } else if (response.statusCode() == 422) {
                    validateUnprocessableEntityResponse(response);
                } else {
                    fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail(e.getMessage());
        }
    }

    private Map<String, String> headersToDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private void checkSuccessfulResponse(Response response) {
        JsonPath jsonPath = response.jsonPath();

        assertThat(jsonPath.get("total"), instanceOf(Integer.class));
        assertThat(jsonPath.getList("registrations"), notNullValue());

        // iterate over the items in the 'registrations' array, validate each field
        for (int i = 0; i < jsonPath.getList("registrations").size(); i++) {
            assertThat(jsonPath.getString("registrations[" + i + "].id"), notNullValue());
            assertThat(jsonPath.getString("registrations[" + i + "].reference"), notNullValue());
            assertThat(jsonPath.getString("registrations[" + i + "].startDate"), notNullValue());
            // add check for other fields
        }
    }

    private void validateErrorResponse(Response response) {
        // Implement specific assertions based on the response structure for status code 400
        assertThat(response.contentType(), equalTo(ContentType.JSON));
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("error"), notEmptyString());
    }

    private void validateNotFoundResponse(Response response) {
        // Implement specific assertions based on the response structure for status code 404
        assertThat(response.contentType(), equalTo(ContentType.JSON));
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("message"), containsString("not found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Implement specific assertions based on the response structure for status code 422
        assertThat(response.contentType(), equalTo(ContentType.JSON));
        JsonPath jsonPath = response.jsonPath();
        assertThat(jsonPath.getString("error"), containsString("unprocessable entity"));
    }
}
