// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /recipients/persons/{id}_delete for http method type DELETE in rest-assured framework

// RoostTestHash=819791060f

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

public class persons_idDeleteTest {

    private static final String CSV_FILE_PATH = "src\\test\\java\\com\\team\\RoostTest\\persons_id_delete.csv";
    private static final String BASE_URI_PATH = "/recipients/persons/";

    @Test
    public void persons_id_delete_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader(
                Paths.get(CSV_FILE_PATH).toFile()))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                // Send DELETE request 
                Response response = given()
                        .pathParam("id", map.get("id"))
                        .when()
                        .delete(BASE_URI_PATH + "{id}")
                        .then()
                        .extract()
                        .response();

                int statusCode = response.getStatusCode();
                validateResponse(statusCode);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateResponse(int statusCode) {
        switch (statusCode) {
            case 200:
                System.out.println("Description: successful operation");
                break;
            case 400:
                System.out.print("Description: Bad request");
                break;
            case 401:
                System.out.print("Description: Authentication required");
                break;
            default:
                break;
        }
    }
}
