// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=819791060f

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.*;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class persons_idDeleteTest {
    private static final String FILE_PATH = "src/test/java/com/team/RoostTest/persons_id_delete.csv";
    
    @Test  
    public void persons_id_delete_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {  
            Map<String, String> map = createHeaderMap(reader);
            processLines(reader, map); 
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private static Map<String, String> createHeaderMap(BufferedReader reader) throws IOException {
        String headerLine = reader.readLine();  
        String[] headers = headerLine.split(",");
        Map<String, String> map = new HashMap<>();  
        return map;
    }

    private static void processLines(BufferedReader reader, Map<String, String> map) throws IOException {
        String line;  
        while ((line = reader.readLine()) != null) {  
            populateData(map, line.split(","));
            Response response = makeRequest(map.get("id"));
            processResponse(response); 
        }
    }

    private static void populateData(Map<String, String> map, String[] data) {
        for (int i = 0; i < data.length; i++) {  
            map.put(map.keySet().toArray()[i].toString(), data[i]); 
        }  
    }

    private static Response makeRequest(String id) {
        return given()
            .pathParam("id", id)
            .when()
            .delete("/recipients/persons/{id}")  
            .then() 
            .extract()
            .response();   
    }

    private static void processResponse(Response response) {
        int statusCode = response.statusCode();
        switch(statusCode) {
            case 200:
                System.out.println("Description: Successful Operation");
                break;
            case 400:
                System.out.println("Description: Bad Request");
                validateErrorResponse(response);
                break;
            case 401:
                System.out.println("Description: Authentication Required");
                validateUnprocessableEntityResponse(response);
                break;
            case 404:
                System.out.println("Description: Invalid ID supplied");
                validateNotFoundResponse(response);
                break;
            default:
                System.out.println("Description: Unexpected Response Code");
        }
    }

    private static void validateErrorResponse(Response response) {
        assertThat(response.jsonPath().getString("message"), is("Invalid ID supplied"));
        assertThat(response.jsonPath().getString("code"), is("400"));
    }

    private static void validateNotFoundResponse(Response response) {
        assertThat(response.jsonPath().getString("message"), is("Person not found"));
        assertThat(response.jsonPath().getString("code"), is("404"));
    }

    private static void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.jsonPath().getString("message"), is("Authentication Required"));
        assertThat(response.jsonPath().getString("code"), is("401"));
    }
}
