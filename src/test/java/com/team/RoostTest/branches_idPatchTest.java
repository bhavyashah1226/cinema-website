// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=9caaa2ef96

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.*;

public class branches_idPatchTest {

    @Test
    public void branches_id_patch_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src\\test\\java\\com\\team\\RoostTest\\branches_id_patch.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("id", map.get("id"))
                        .contentType(ContentType.JSON)
                        .body("{" +
                                "  \"tradeName\": \"" + map.get("tradeName") + "\"," +
                                "  \"phone\": \"" + map.get("phone") + "\"," +
                                "  \"email\": \"" + map.get("email") + "\"" +
                                "}")
                        .when()
                        .patch("/recipients/branches/{id}")
                        .then()
                        .extract().response();

                int statusCode = response.statusCode();
                switch(statusCode) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessResponse(Response response) {
        assertNotNull(response.jsonPath().get("id"));
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));

        assertThat(response.jsonPath().getString("email"), matchesPattern("^([a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})$"));
      
        // Continue validation for remaining fields
    }

    private void validateErrorResponse(Response response) {
        // Logic for checking specific assertions of error response,
        // For example: Checking if the "error" field exists in the JSON response
        assertNotNull(response.jsonPath().get("error"));
    }

    private void validateNotFoundResponse(Response response) {
        // Specific assertions based on the response structure for 404 status code
        assertEquals("Not Found", response.jsonPath().getString("message"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Specific assertions based on response structure for 422 status code
        assertNotNull(response.jsonPath().get("errors"));
    }
}
