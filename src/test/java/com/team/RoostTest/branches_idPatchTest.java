// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /recipients/branches/{id}_patch for http method type PATCH in rest-assured framework

// RoostTestHash=9caaa2ef96

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class branches_idPatchTest {

    @Test
    public void branches_id_patch_Test() {
        String baseUrl = System.getenv("BASE_URL");
        RestAssured.baseURI = baseUrl == null ? "http://localhost:8080" : baseUrl;

        try {
            final List<String> lines = Files.readAllLines(Paths.get("src/test/java/com/team/RoostTest/branches_id_patch.csv"));
            final String[] headers = lines.get(0).split(",");
            for (int i = 1; i < lines.size(); i++) {
                final String line = lines.get(i);
                final String[] data = line.split(",");
                final Map<String, String> map = new HashMap<>();
                for (int j = 0; j < headers.length; j++) {
                    map.put(headers[j], data[j]);
                }

                Response response = given()
                        .pathParam("id", map.get("id"))
                        .contentType(ContentType.JSON)
                        .body(String.format("{\n" +
                                "  \"tradeName\": \"%s\",\n" +
                                "  \"phone\": \"%s\",\n" +
                                "  \"email\": \"%s\"\n" +
                                "}", map.get("tradeName"), map.get("phone"), map.get("email")))
                        .when()
                        .patch("/recipients/branches/{id}")
                        .then()
                        .extract().response();

                validateResponseByStatusCode(response);
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    private void validateResponseByStatusCode(Response response) {
        final int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                System.out.println("Description: Bad Request");
                break;
            case 401:
                System.out.println("Description: Authentication Required");
                break;
            default:
                fail("Unexpected status code: " + statusCode);
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().getString("id"), notNullValue());
        assertThat(response.jsonPath().getString("email"), matchesPattern("^(([^<>()[\\]\\.,;:\\s@\"]+(.[^<>()[\\]\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}.[0-9]{1,3}\.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+.)+[a-zA-Z]{2,}))$"));
        assertThat(response.jsonPath().getString("phone"), notNullValue());
        assertThat(response.jsonPath().getString("tradeName"), notNullValue());
    }
}
