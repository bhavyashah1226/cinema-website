// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=4affc26394

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class apikeys_idDeleteTest {
    private static final String APIKEYS_ID_DELETE_CSV = "src/test/java/com/team/RoostTest/apikeys_id_delete.csv";
    private static final String BASE_URL = "BASE_URL";
    private String baseURI;

    @Before
    public void setup() {
        baseURI = System.getenv(BASE_URL);
    }

    @Test  
    public void apikeys_id_delete_Test() {  
        RestAssured.baseURI = baseURI;

        try (BufferedReader reader = new BufferedReader(new FileReader(APIKEYS_ID_DELETE_CSV))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = createDataMap(headers, line.split(","));
                Response response = deleteApiKey(map.get("id"));    
                validateResponse(response.statusCode());
            }
        } catch (IOException e) {  
            e.printStackTrace();  
        }
    }

    private Map<String, String> createDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }

        return map;
    }

    private Response deleteApiKey(String id) {
       return given()
              .pathParam("id", id)
              .when()
              .delete("/apikeys/{id}")  
              .then().contentType(ContentType.JSON) // Expecting responses in JSON
              .extract().response();
    }

    private void validateResponse(int statusCode) {
        switch (statusCode) {
            case 200:
                System.out.println("Description: successful operation");
                break;
            case 400:
                System.out.println("Description: Bad Request");
                break;
            case 401:
                System.out.println("Description: Unauthorised");
                break;
            default:
                System.out.println("Error: Unexpected response received");
                break;
        }
    }
}
