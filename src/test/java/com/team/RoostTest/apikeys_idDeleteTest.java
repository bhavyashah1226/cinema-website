// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /apikeys/{id}_delete for http method type DELETE in rest-assured framework

// RoostTestHash=4affc26394

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

public class apikeys_idDeleteTest {

    @Test
    public void apikeys_id_delete_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/apikeys_id_delete.csv"))) {

            String headerLine = reader.readLine();
            String[] headers = headerLine.split(","); 

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(","); 

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .contentType(ContentType.JSON)
                        .pathParam("id", map.get("id"))
                        .when()
                        .delete("/apikeys/{id}")
                        .then()
                        .extract()
                        .response();

                assertEquals(response.statusCode(), 200);

                if (response.statusCode() == 400) {
                    validateErrorResponse(response);
                } else if (response.statusCode() == 404) {
                    validateNotFoundResponse(response);
                } else if (response.statusCode() == 422) {
                    validateUnprocessableEntityResponse(response);
                }

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateErrorResponse(Response response) {
        assertEquals("Bad Request", response.jsonPath().getString("message"));
    }

    private void validateNotFoundResponse(Response response) {
        assertEquals("Not Found", response.jsonPath().getString("message"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertEquals("Unprocessable Entity", response.jsonPath().getString("message"));
    }

}
