// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /recipients/branches_get for http method type GET in rest-assured framework

// RoostTestHash=74a40da00e

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;

public class BranchesGetTest {
    private static final String BASE_PATH =  "/recipients/branches";
    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_FILE_PATH = "src/test/java/com/team/RoostTest/branches_get.csv";

    @Test  
    public void branches_get_Test() {  
        RestAssured.baseURI = BASE_URL;
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");  
            String line;
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");
                Map<String, String> queryParameters = createQueryParamMap(headers, data);
                Response response = getResponse(queryParameters); 
                processResponse(response);  
            }
        } catch (IOException e) { 
            e.printStackTrace(); 
        }  

    }

    private void processResponse(Response response) {
        switch(response.statusCode()) {
			case 200:
				validateSuccessResponse(response);
				break;
			case 400:
				System.out.println("Description: Bad Request");
				break;
			case 401:
				System.out.println("Description: Authentication Required");
				break;				
			default:
				assert false: "Invalid response status code: " + response.statusCode();
		}
    }

    private Response getResponse(Map<String, String> map) {
        return given()
                .pathParam("coc-number", map.get("coc-number"))
                .pathParam("coc-branch-number", map.get("coc-branch-number"))
                .pathParam("trade-name", map.get("trade-name"))
                .pathParam("size", map.get("size"))
                .pathParam("offset", map.get("offset"))
                .when()
                .get(BASE_PATH)
                .then() 
                .extract().response();
    }

    private Map<String, String> createQueryParamMap(String[] headers, String[] data) {
        Map<String, String> queryParamMap = new HashMap<>();
        for(int i = 0; i < headers.length; i++) {
            queryParamMap.put(headers[i], data[i]);
        }
        return queryParamMap;
    }

    private void validateSuccessResponse(Response response) {
		System.out.println("Description: successful operation");
		if(response.jsonPath().get("total") != null) {
			assertThat(response.jsonPath().get("total"), is(instanceOf(Integer.class)));  
		}
		if(response.jsonPath().get("branches") != null) {  
			List<String> branchList = response.jsonPath().getList("branches");
			for(int i = 0; i < branchList.size(); i++) {
				validateBranch(response, i);
			}  
			assertThat(branchList, is(instanceOf(List.class)));
		}
	}

    private void validateBranch(Response response, int index) {
        String branchBase = "branches[" + index + "].";
		if(response.jsonPath().get(branchBase + "id") != null) {
			assertThat(response.jsonPath().get(branchBase + "id"), is(instanceOf(String.class)));
		}
		if(response.jsonPath().get(branchBase + "email") != null) {  
			assertThat(response.jsonPath().get(branchBase + "email"), matchesPattern("^(([^<>()[\\]\\.,;:\\s@\"]+(\\.[^<>()[\\]\\.,;:\\s@\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"));
			assertThat(response.jsonPath().get(branchBase + "email"), is(instanceOf(String.class)));
		}
		// .. Repeat for other branches data
    }

}
