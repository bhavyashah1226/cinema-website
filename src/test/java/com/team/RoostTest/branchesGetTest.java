// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=74a40da00e

package com.team.RoostTest;

import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.http.ContentType;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

import org.hamcrest.Matchers;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;

import java.io.FileReader;
import java.io.Reader;
import static io.restassured.matcher.RestAssuredMatchers.matchesXsdInClasspath;

import java.util.List;

@FixMethodOrder(org.junit.runners.MethodSorters.NAME_ASCENDING)
public class branchesGetTest {
    
    @Before
    public void setBaseURI() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }
    
    @Test
    public void branches_get_Test() {
        try {
            Reader reader = new FileReader("src/test/java/com/team/RoostTest/branches_get.csv");
            Iterable<CSVRecord> records = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(reader);
            for (CSVRecord record : records) {
                given()
                .contentType(ContentType.JSON)
                .pathParam("coc-number", record.get("coc-number"))
                .pathParam("coc-branch-number", record.get("coc-branch-number"))
                .pathParam("trade-name", record.get("trade-name"))
                .pathParam("size", record.get("size"))
                .pathParam("offset", record.get("offset"))
                .when()
                .get("/recipients/branches")
                .then()
                .assertThat()
                .statusCode(200)
                .body("branches", Matchers.notNullValue())
                .body("branches.size()", Matchers.is(Integer.parseInt(record.get("size"))));
            }
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void branches_get_BadRequest() {
        ...
        // Assertions for 400 error response
    }

    @Test
    public void branches_get_NotFound() {
        ...
        // Assertions for 404 error response
    }

    @Test
    public void branches_get_UnprocessableEntity() {
        ...
        // Assertions for 422 error response
    }
}
