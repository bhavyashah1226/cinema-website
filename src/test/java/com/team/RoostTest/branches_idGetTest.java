// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=061355b093

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;

import static io.restassured.RestAssured.given;

public class branches_idGetTest {
  
    private static void validateErrorResponse(Response response) {
      assertThat(response.jsonPath().get("message")).isEqualTo("Bad Request"); 
    } 
   
    private static void validateNotFoundResponse(Response response) {
      assertThat(response.jsonPath().get("message")).isEqualTo("Not Found");
    } 

    private static void validateUnprocessableEntityResponse(Response response) {
      assertThat(response.jsonPath().get("message")).isEqualTo("Unprocessable Entity");
    } 

    /*
     * Updating the test to return response rather than void. Also application of try-with-resources for efficient exception handling.
     */
    public Response executeBranchesIdGet(int id) {
        RestAssured.baseURI = System.getenv("BASE_URL");

        Response response = 
		                given()
		                    .contentType(ContentType.JSON)
		                    .pathParam("id", id)
		                .when()
		                    .get("/recipients/branches/{id}")
		                .then()
                            .extract()
                            .response();
                        
        assertEquals("Harry Potter", response.jsonPath().get("name"));
        assertEquals(true, response.jsonPath().getBoolean("wizard"));
        
        int statusCode = response.getStatusCode();

        // Validates if the status code is 200, in this case operation was successful otherwise check other status codes.
        if(statusCode == 200) {
          System.out.println("Description: successful operation")
        } else if(statusCode == 400) {
          validateErrorResponse(response);
        } else if(statusCode == 404) {
          validateNotFoundResponse(response);
        } else if(statusCode == 422) {
          validateUnprocessableEntityResponse(response);
        }

        return response;
    }
}
