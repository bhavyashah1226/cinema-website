// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=2758affb7e

package com.team.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.nio.file.*;
import java.util.*;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.*;

public class AccountsPatchTest {
    
    @Test
    public void testPatchOnAccounts() {
        RestAssured.baseURI = System.getenv("BASE_URL");
        
        List<String> lines = readCSV("src/test/java/com/team/RoostTest/accounts_patch.csv");
        String[] headers = lines.get(0).split(",");
        
        for (int j = 1; j < lines.size(); j++) {
            Map<String, String> map = mapCSVData(headers, lines.get(j).split(","));
            
            Response response = given().contentType(ContentType.JSON)
                .body("{\"email\": \"" + map.get("email") + "\"}")
                .when().patch("/accounts")
                .then().extract().response();
            
            validateResponse(response);
        } 
    }

    private List<String> readCSV(String filePath) {
        try {
            return Files.readAllLines(Path.of(filePath));
        } catch (IOException e) {
            throw new RuntimeException("Failed to read CSV file.", e);
        }
    }

    private Map<String, String> mapCSVData(String[] keys, String[] values) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < keys.length; i++) {  
            map.put(keys[i], values[i]);
        }  
        return map;
    }

    private void validateResponse(Response response) {
        switch (response.getStatusCode()) {
            case 200:
                System.out.println("Description: successful operation");
                break;
            case 400:
                validateBadRequestResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                throw new IllegalStateException("Unexpected status code: " + response.getStatusCode());
        }
    }

    private void validateBadRequestResponse(Response response) {
        assertThat(response.jsonPath().getString("error"), is(not(emptyOrNullString())));
    }
    
    private void validateNotFoundResponse(Response response) {
        assertThat(response.jsonPath().getString("message"), containsString("not found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.jsonPath().getString("error"), containsString("Unprocessable Entity"));
    }
}
