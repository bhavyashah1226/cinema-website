// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /accounts_post for http method type POST in rest-assured framework

// RoostTestHash=53e96f9805

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

public class accountsPostTest {

    @Test
    public void accounts_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/accounts_post.csv"))) {

            // Read header
            String[] headers = reader.readLine().split(",");
            String line;

            while ((line = reader.readLine()) != null) {
                try {
                    String[] data = line.split(",");

                    // Map header to data
                    Map<String, String> map = new HashMap<>();
                    for (int i = 0; i < headers.length; i++) {
                        map.put(headers[i], data[i]);
                    }

                    // Make request and extract the response
                    Response response = given()
                            .pathParam("commit-hash", map.get("commit-hash"))
                            .contentType(ContentType.JSON)
                            .body("{\n"+
                            "  \"email\": \"" + map.get("email") + "\"\n"+
                            "}")
                            .post("/accounts")
                            .then()
                            .extract().response();

                    // Check the status code and print respective messages
                    switch (response.statusCode()) {
                        case 201:
                            assertEquals("Description: successful operation", response.body().asString());
                            break;
                        
                        case 400:
                            assertEquals("Description: Bad Request", response.body().asString());
                            break;
                    
                        default:
                            System.out.println("Unexpected Status Code: " + response.statusCode());
                    }

                } catch (Exception e) {
                    System.out.println("Error in processing the line: " + line);
                    e.printStackTrace();
                }
            }
        } catch (IOException e1) {
            System.out.println("Error in reading the file");
            e1.printStackTrace();
        }
    }
}
