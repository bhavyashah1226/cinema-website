// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=53e96f9805

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class AccountsPostTest {
  
    @Test  
    public void shouldCreateNewAccount() {

        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/accounts_post.csv"))) {  

            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  

            while ((line = reader.readLine()) != null) {  

                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
                String requestBody = "{\n"+
                                        "  \"email\": \"" + map.get("email") + "\n" +
                                   "}";
                
                Response response = 
                    given()
                        .pathParam("commit-hash", map.get("commit-hash"))
                        .contentType(ContentType.JSON)
                        .body(requestBody)
                    .when()
                        .post("/accounts")
                    .then() 
                        .extract().response();    

                switch(response.getStatusCode()){
                    case 201:
                        validateSuccessfulOperation(response);
                        break;
                    case 400:
                        validateBadRequestResponse(response);
                        break;
                    // include other status code handlers if necessary
                    default:
                        fail("Unexpected HTTP status code: " + response.getStatusCode());
                        break;
                }    
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private void validateSuccessfulOperation(Response response) {
        assertThat(response.statusCode(), equalTo(201));
        assertThat(response.path("email"), is(notNullValue()));
        System.out.println("Description: successful operation");
    }

    private void validateBadRequestResponse(Response response) {
        assertThat(response.statusCode(), equalTo(400));
        assertThat(response.path("error"), is(notNullValue()));
        System.out.println("Description: Bad Request");
    }
}
