// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=f1fc1d06f7

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class credentials_idDeleteTest {
    RequestSpecification request;

    @Test
    public void credentials_id_delete_Test() {
        String baseURI = System.getenv("BASE_URL");
        request = RestAssured.given().baseUri(baseURI);
        
        // load credentials data
        Map<String, String> map = loadCsvData();

        // deleting the credentials
        for (Map.Entry<String, String> entry: map.entrySet()) {
            String id = entry.getKey();
            Response response = deleteCredentials(id);
            handleResponseStatus(response.statusCode());
        }
    }

    private Map<String, String> loadCsvData() {
        Map<String, String> map = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/credentials_id_delete.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }
            }
        } catch(IOException e) {
            e.printStackTrace();
        }

        return map;
    }

    private Response deleteCredentials(String id) {
        return request
                .given()
                .pathParam("id", id)
                .when()
                .delete("/credentials/{id}")
                .then()
                .contentType(ContentType.JSON)
                .extract().response();
    }

    private void handleResponseStatus(int status) {
        switch (status) {
            case 200:
                System.out.println("Description: successful operation"); break;
            case 400:
                System.out.println("Description: Bad Request"); break;
            case 401:
                System.out.println("Description: Authentication Required"); break;
            default: 
                System.out.println("Not expected status code: " + status);
        }
    }
}
