// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /authorizations_post for http method type POST in rest-assured framework

// RoostTestHash=ed8c1b7bff

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class authorizationsPostTest {

    @Test  
    public void authorizations_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file and create data map
        try (Stream<String> lines = Files.lines(Paths.get("src/test/java/com/team/RoostTest/authorizations_post.csv"))) {
            lines.forEach(line -> {
                String[] data = line.split(",");
                Map<String, String> dataMap = new HashMap<>();
                dataMap.put("email", data[0]);

                // Send request and get response
                Response response = given()
                                    .contentType(ContentType.JSON)
                                    .body(dataMap)
                                    .when()
                                    .post("/authorizations")
                                    .then()
                                    .extract().response(); 

                validateResponse(response);

            });
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 201:
                validateSuccess(response);
                break;
            case 400:
                System.out.println("Description: Bad Request");
                validateBadRequest(response);
                break;
            case 401:
                System.out.println("Description: Authentication Required");
                validateUnauthorizedResponse(response);
                break;
            default:
                fail("Unexpected status code: " + response.statusCode());
        }
    }

    private void validateSuccess(Response response) {
        assertThat(response.jsonPath().getString("id"), is(not(blankOrNullString())));
        assertThat(response.jsonPath().getString("name"), Matchers.matchesPattern(^[\p{L} .'-]{1,100}$));
        assertThat(response.jsonPath().getString("email"), Matchers.matchesPattern(^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$));
        assertThat(response.jsonPath().getString("createdAt"), is(not(blankOrNullString())));
        assertThat(response.jsonPath().getString("updatedAt"), is(not(blankOrNullString())));
    }

    private void validateBadRequest(Response response) {
        // Specific assertions for BAD request response validation
    }

    private void validateUnauthorizedResponse(Response response) {
        // Specific assertions for Unauthorized response validation
    }
}
