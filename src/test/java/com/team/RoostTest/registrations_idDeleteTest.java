// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /registrations/{id}_delete for http method type DELETE in rest-assured framework

// RoostTestHash=2c75b43156

package com.team.RoostTest;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;
import java.util.stream.Stream;

public class registrations_idDeleteTest {

    @Test
    void registrations_id_delete_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read the CSV file
        try (Stream<String> lines = Files.lines(Paths.get("src/test/java/com/team/RoostTest/registrations_id_delete.csv"))) {
            lines.skip(1).forEach(line -> {
                String[] data = line.split(",");
                String id = data[0];

                // Deleting registrations using the id from CSV
                Response response = given()
                        .contentType(ContentType.JSON)
                        .pathParam("id", id)
                        .when()
                        .delete("/registrations/{id}")
                        .then()
                        .extract().response();

                // Response validation
                switch (response.statusCode()) {
                    case 200: validateSuccessResponse(response); break;
                    case 400: validateBadRequestResponse(response); break;
                    case 401: validateAuthenticationErrorResponse(response); break;
                    default: fail("Unexpected status code: " + response.statusCode());
                }
            });

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    void validateSuccessResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(200)
                .body("description", equalTo("successful operation"));
    }

    void validateBadRequestResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(400)
                .body("description", equalTo("Bad Request"));
    }

    void validateAuthenticationErrorResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(401)
                .body("description", equalTo("Authentication Required"));
    }
}
