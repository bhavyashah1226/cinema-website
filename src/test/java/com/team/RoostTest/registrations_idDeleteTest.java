// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=2c75b43156

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;

public class registrations_idDeleteTest {

    RestAssured.baseURI = System.getenv("BASE_URL");

    @Test
    public void registrations_id_delete_Test() throws IOException {

        try (Reader reader = new FileReader("src/test/java/com/team/RoostTest/registrations_id_delete.csv")) {
            CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT
                    .withFirstRecordAsHeader()
                    .withIgnoreHeaderCase()
                    .withTrim());

            for (CSVRecord csvRecord : csvParser) {
                Map<String, String> recordMap = csvRecord.toMap();

                Response response = given()
                        .contentType(ContentType.JSON)
                        .pathParam("id", recordMap.get("id"))
                        .when()
                        .delete("/registrations/{id}")
                        .then()
                        .extract().response();

                int status = response.getStatusCode();
                
                switch(status){
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateBadRequestResponse(response);
                        break;
                    case 401:
                        validateAuthorizationErrorResponse(response);
                        break;
                    default:
                        fail("Unexpected response code: " + status);   
                }
            }
        }
    }

    private void validateSuccessResponse(Response response) {
        assertEquals(200, response.getStatusCode());
        assertNotNull(response.jsonPath().get("responseId"));
        assertTrue(response.getBody().asString().contains("successful operation"));
    }

    private void validateBadRequestResponse(Response response) {
        assertEquals(400, response.getStatusCode());
        assertTrue(response.getBody().asString().contains("Bad Request"));
    }
    
    private void validateAuthorizationErrorResponse(Response response) {
        assertEquals(401, response.getStatusCode());
        assertTrue(response.getBody().asString().contains("Authentication Required"));
    }
}
