// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /authorizations_get for http method type GET in rest-assured framework

// RoostTestHash=3b64f22044

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.CoreMatchers;

public class authorizationsGetTest {
  
    @Test  
    public void authorizations_get_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/authorizations_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) 
                    map.put(headers[i], data[i]);  
  
                Response response = given().contentType(ContentType.JSON)
                .when()
                .get("/authorizations")  
                .then().extract().response();    

                int statusCode = response.getStatusCode();
                switch(statusCode){
                  case 200:
                    validateSuccessfulResponse(response);
                    break;

                  case 400:
                    System.out.println("Description: Bad Request");
                    break;

                  case 401:
                    System.out.println("Description: Authentication Required");
                    break;

                  default:
                    System.out.println("Unexpected Status Code: " + statusCode);
                    break;
                }   
            }  
        }catch (IOException e) {  
            e.printStackTrace();  
        }
    }

    private void validateSuccessfulResponse(Response response){
        assertThat(response.jsonPath().getInt("total"), instanceOf(Integer.class));   
  
        List<Map<String,?>> authorizations = response.jsonPath().getList("authorizations");
        for (Map<String,?> authorization : authorizations) {  
            assertThat(authorization.get("id"), CoreMatchers.not(emptyOrNullString()));
            assertThat(authorization.get("name"), CoreMatchers.matchesPattern("^[\p{L} .'-]{1,100}$")); 
            assertThat(authorization.get("email"), CoreMatchers.matchesPattern("^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$")); 
  
            assertThat(authorization.get("createdAt"), 
                               CoreMatchers.anyOf(is(instanceOf(String.class)), emptyOrNullString()));

            assertThat(authorization.get("updatedAt"),
                               CoreMatchers.anyOf(is(instanceOf(String.class)), emptyOrNullString()));
        }
    } 
}
