// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /login_post for http method type POST in rest-assured framework

// RoostTestHash=3122292ee3

package com.team.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class loginPostTest {

    private static final String LOGIN_POST_PATH = "src\\test\\java\\com\\team\\RoostTest\\login_post.csv";

    @Test
    public void loginPostTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader(LOGIN_POST_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = getMappedHeaderWithValues(headers, line);

                Response response = makePostRequest(map);

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> getMappedHeaderWithValues(String[] headers, String line) {
        Map<String, String> map = new HashMap<>();
        String[] data = line.split(",");
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response makePostRequest(Map<String, String> map) {
        String body = "{\n" +
                "  \"email\": \"" + map.get("email") + "\",\n" +
                "  \"otp\": \"" + map.get("otp") + "\",\n" +
                "  \"client\": \"" + map.get("client") + "\"\n" +
                "}";

        return given()
                .contentType(ContentType.JSON)
                .body(body)
                .when()
                .post("/login")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 201: // Successful operation
                validateSuccessfulResponse(response);
                break;
            case 400: // Bad request
                System.out.println("Description: Bad Request");
                // Add specific assertions based on the response structure for the corresponding status code 400.
                break;
            default: // Other error status
                fail("Unexpected status code: " + statusCode);
        }
    }

    private void validateSuccessfulResponse(Response response) {
        System.out.println("Description: successful operation");

        String token = response.jsonPath().get("token");
        if (token != null) {
            assertThat(token, matchesPattern("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));
            assertThat(token, instanceOf(String.class));
        }
    }
}
