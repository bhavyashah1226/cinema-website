// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=3122292ee3

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class LoginPostTest {

    @Test
    public void loginPostTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader(
                "src/test/java/com/team/RoostTest/login_post.csv"))) {

            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .contentType(ContentType.JSON)
                        .body("{\n" +
                                "  \"email\": \"" + map.get("email") + "\",\n" +
                                "  \"otp\": \"" + map.get("otp") + "\",\n" +
                                "  \"client\": \"" + map.get("client") + "\"\n" +
                                "}")
                        .post("/login");

                ValidatableResponse validatableResponse = response.then();

                switch (response.statusCode()) {
                    case 201:
                        validatableResponse.body("token", matchesPattern(
                                "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));
                        break;
                    case 400:
                        validatableResponse.body("error", is("Bad Request"));
                        break;
                    case 404:
                        validatableResponse.body("error", is("Not Found"));
                        break;
                    case 422:
                        validatableResponse.body("error", is("Unprocessable Entity"));
                        break;
                    default:
                        throw new IllegalStateException("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
