// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /recipients/branches_put for http method type PUT in rest-assured framework

// RoostTestHash=63322ffb26

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

import org.hamcrest.MatcherAssert;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class BranchesPutTest {

    @Test
    void branches_put_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/branches_put.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> objectBody = csvDataReader(line);
                Response response = putBranchesRequest(objectBody);
                validateResponse(response);
} catch (IOException e) {
            e.printStackTrace();
        }
    }

    Map<String, String> csvDataReader(String line) {
        String[] headers = line.split(",");
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    Response putBranchesRequest(Map<String, String> map) {
        return given()
            .contentType(ContentType.JSON)
            .body(map)
            .when()
            .put("/recipients/branches")
            .then()
            .extract()
            .response();
    }

    void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 200:
                validateBranchReturned(response);
                break;
            case 201:
                validateBranchCreated(response);
                break;
            case 400:
                System.out.println("Description: Bad Request");
                break;
            case 401:
                System.out.println("Description: Authentication Required");
                break;
            default: 
                // Handle unexpected status code
        }
    }

   void validateBranchReturned(Response response) {
       assertOnResponseParameters(response);
       System.out.println("Description: successful operation, existing branch returned");
   }

   void validateBranchCreated(Response response) {
        assertOnResponseParameters(response);
        System.out.println("Description: successful operation, branch created");
   }

   void assertOnResponseParameters(Response response) {
        List<String> paths = List.of("id", "email", "phone", "cocNumber", "cocBranchNumber", "tradeName", "tradeNames", "eoriNumber", "deregistrationDate", "createdAt", "updatedAt");
        paths.forEach(path -> MatcherAssert.assertThat(response.jsonPath().get(path), instanceOf(String.class)));
    }
}
