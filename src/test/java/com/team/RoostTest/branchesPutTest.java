// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=63322ffb26

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.matchesPattern;
import static org.hamcrest.Matchers.notNullValue;

public class BranchesPutTest {

     @Test  
     public void branchesPutTest() throws IOException {  
         RestAssured.baseURI = System.getenv("BASE_URL");  

         // Read CSV file  
         try (BufferedReader reader = new BufferedReader(new FileReader(
                 "src/test/java/com/team/RoostTest/branches_put.csv"))) {
             String line;  
             while ((line = reader.readLine()) != null) {
                 Map<String, String> csvData = processCsvLine(line);

                 // Providing Dynamic Test Data
                 String payload = String.format("{\n\"cocNumber\": \"%s\",\n\"cocBranchNumber\": \"%s\",\n\"city\": \"%s\"," +
                                 "\n\"tradeName\": \"%s\",\n\"phone\": \"%s\",\n\"email\": \"%s\"\n}",
                         csvData.get("cocNumber"), csvData.get("cocBranchNumber"), csvData.get("city"),
                         csvData.get("tradeName"), csvData.get("phone"), csvData.get("email"));

                 Response response = given()
                         .contentType(ContentType.JSON)
                         .body(payload)
                         .when()
                         .put("/recipients/branches")
                         .then()
                         .extract().response();

                 assertResponse(response);
             }
         }
    }

    private Map<String, String> processCsvLine(String line) {
        Map<String, String> csvData = new HashMap<>();
        String[] headers = new String[] {"cocNumber", "cocBranchNumber", "city", "tradeName", "phone", "email"};
        String[] values = line.split(",");
        for (int i = 0; i < headers.length; i++) {
            csvData.put(headers[i], values[i]);
        }
        return csvData;
    }

    public void assertResponse(Response response) {
        if (response.statusCode() == 200) {
            validateBranchResponse(response);
        } else if (response.statusCode() == 201) {
            validateCreatedResponse(response);
        } else if (response.statusCode() == 400) {
            validateBadRequest(response);
        } else if (response.statusCode() == 401) {
            validateAuthenticationRequiredResponse(response);
        } else if (response.statusCode() == 404) {
            validateBadRequest(response);
        } else if (response.statusCode() == 422) {
            validateUnprocessableEntityResponse(response);
        }
    }

    private void validateBranchResponse(Response response) {
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("email"), matchesPattern(
                "^(([^<>()[\\]\\.,;:\\s@\"]+(\\.[^<>()[\\]\\.,;:\\s@\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"));
        assertThat(response.jsonPath().getString("cocNumber"), matchesPattern("^\\d{8}$"));
        assertThat(response.jsonPath().get("createdAt"), notNullValue());
    }

    private void validateCreatedResponse(Response response) {
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("updatedAt"), notNullValue());
    }

    private void validateBadRequest(Response response) {
        assertThat(response.asString(),
                matchesPattern(".*The server could not understand the request due to invalid syntax."));
    }
    
    private void validateAuthenticationRequiredResponse(Response response) {
        assertThat(response.asString(),
                matchesPattern(".*No authentication credentials provided or authentication failed."));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.asString(),
                matchesPattern(".*Unable to process the content of the request."));
    }
}
