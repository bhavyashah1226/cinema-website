// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=c1b0bbc56b

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.*;

public class RegistrationsIdPatchTest {
  
    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_FILE_PATH = "src/test/java/com/team/RoostTest/registrations_id_patch.csv";

    @Test  
    public void shouldUpdateRegistrationDataFromFile() {  
        // Reading data from CSV
        try (Stream<String> lines = Files.lines(Paths.get(CSV_FILE_PATH))) {
            lines.skip(1).forEach(line -> {
                String[] data = line.split(",");
                Map<String, String> csvData = mapCsvData(data);
                // Updating data
                Response response = updateRegistrationData(csvData);

                // Verifying the response
                switch (response.getStatusCode()) {
                    case 200:
                        verifySuccessfulResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    default:
                        fail("Unsupported status code found: " + response.getStatusCode());
                }
            });
        } catch (Exception e) {
            fail("Exception while reading CSV file: " + e.getMessage());
        }
    }

    private Map<String, String> mapCsvData(String[] data) {
        // Mapping csv data to Map
        Map<String, String> csvData = new HashMap<>();
        csvData.put("id", data[0]);
        csvData.put("reference", data[1]);
        csvData.put("revoked", data[2]);
        csvData.put("suspendedUntil", data[3]);
        csvData.put("endDate", data[4]);
        return csvData;
    }

    private Response updateRegistrationData(Map<String, String> data) {
        // Sending request and returning response.
        RestAssured.baseURI = BASE_URL;
        return given()
                .pathParam("id", data.get("id"))
                .contentType(ContentType.JSON)
                .body(data)
                .when()
                .patch("/registrations/{id}")
                .then()
                .extract().response();
    }

    private void verifySuccessfulResponse(Response response) {
        // Verifying successful response
        Map<String, ?> responseData = response.jsonPath().getMap("");
        assertEquals(responseData.get("id"), instanceOf(String.class));
        assertEquals(responseData.get("reference"), instanceOf(String.class));
        assertEquals(responseData.get("startDate"), instanceOf(String.class));
        assertEquals(responseData.get("endDate"), instanceOf(String.class));
        assertEquals(responseData.get("status"), instanceOf(String.class));
    }

    private void validateErrorResponse(Response response) {
        // Validate error response
        Map<String, ?> responseData = response.jsonPath().getMap("");
        assertEquals(responseData.get("code"), 400);
        assertNotNull(responseData.get("message"));
    }

}
