// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=ae6b8ce5ab

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import org.junit.BeforeClass;
import org.junit.Test;
import org.hamcrest.Matchers;
import org.hamcrest.MatcherAssert;

public class meGetTest {
   
    @BeforeClass
    public static void setupURL()
    {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }
    
    @Test  
    public void me_get_Test_Valid() {         
        Response response = given()
            .contentType(ContentType.JSON)
            .when()
            .get("/me")
            .then()
            .extract().response();  

        // Handle the Successful operation
        if (response.statusCode() == 200) {
            System.out.println("Description: successful operation");
            validateSuccessResponse(response);
        } else {
            validateErrorResponse(response);
        }
    }
    
    private void validateSuccessResponse(Response response) {
        MatcherAssert.assertThat(response.jsonPath().get("id").toString(), Matchers.instanceOf(String.class));  
        MatcherAssert.assertThat(response.jsonPath().get("name").toString(), Matchers.matchesPattern("^[\p{L} .'-]{1,100}$")); 
        MatcherAssert.assertThat(response.jsonPath().get("image").toString(), Matchers.matchesPattern("^\w+:(\/?\/?)[^\s]+$")); 
        MatcherAssert.assertThat(response.jsonPath().get("email").toString(), Matchers.matchesPattern("^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$")); 
        MatcherAssert.assertThat(response.jsonPath().get("createdAt").toString(), Matchers.instanceOf(String.class));  
        MatcherAssert.assertThat(response.jsonPath().get("updatedAt").toString(), Matchers.instanceOf(String.class));
    }
    
    private void validateErrorResponse(Response response) {
        switch (response.statusCode()) {
            case 400: 
                MatcherAssert.assertThat(response.jsonPath().get("error").toString(), Matchers.is("Bad Request"));
                break;
            case 401:
                MatcherAssert.assertThat(response.jsonPath().get("error").toString(), Matchers.is("Authentication Required"));
                break;
            case 422:
                MatcherAssert.assertThat(response.jsonPath().get("error").toString(), Matchers.is("Unprocessable Entity"));
        }
    }
}
