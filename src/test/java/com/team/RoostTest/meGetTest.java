// Test generated by RoostGPT for test restAssuredTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated for /me_get for http method type GET in rest-assured framework

// RoostTestHash=ae6b8ce5ab

package com.team.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class meGetTest {

    @Test  
    public void runMeGetTest() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/team/RoostTest/me_get.csv"))) {  
            String[] headers = reader.readLine().split(",");  

            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  

                Map<String, String> map = getHeaderDataMap(headers, data);

                Response response = 
                        given()
                        .when()
                        .get("/me")  
                        .then()
                        .extract()
                        .response();

                validateResponse(response);  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private void validateResponse(Response response){
        int statusCode = response.statusCode();
        switch(statusCode){
            case 200:
                validateSuccessfulResponse(response);
                break;
            case 400:
                System.out.println("Description: Bad Request");
                break;
            case 401:
                System.out.println("Description: Authentication Required");
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
        }
    }

    private void validateSuccessfulResponse(Response response){
        assertThat("Description: successful operation", response.getStatusCode(), equalTo(200));

        if (response.jsonPath().get("id") != null)
            assertThat(response.jsonPath().get("id"), instanceOf(String.class));

        if (response.jsonPath().get("did") != null) 
            assertThat(response.jsonPath().get("did"), instanceOf(String.class));

        if (response.jsonPath().get("name") != null) 
            assertThat(response.jsonPath().getString("name"), matchesPattern("^[\p{L} .'-]{1,100}$"));

        if (response.jsonPath().get("image") != null) 
            assertThat(response.jsonPath().getString("image"), matchesPattern("^\w+:(\/?\/?)[^\s]+$"));

        if (response.jsonPath().get("email") != null) 
            assertThat(response.jsonPath().getString("email"), matchesPattern("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"));

        if (response.jsonPath().get("createdAt") != null) 
            assertThat(response.jsonPath().get("createdAt"), instanceOf(String.class));

        if (response.jsonPath().get("updatedAt") != null) 
            assertThat(response.jsonPath().get("updatedAt"), instanceOf(String.class));

    }

    private Map<String, String> getHeaderDataMap(String[] headers, String[] data){
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++)  
            map.put(headers[i], data[i]);
        return map;
    }
}
