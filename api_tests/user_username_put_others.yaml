# Test generated by RoostGPT for test roostPostmanTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

# RoostTestHash=f6e646c39e

config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "user_username_put_others.csv"
    fields: ["id", "username", "firstName", "lastName", "email", "password", "phone", "userStatus"]
    skipHeader: true
  headers:
    Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"

scenarios:
  - name: "Update user test scenarios"
    flow:
      - log: "Test when all inputs are valid"
        put:
          url: "/user/{{username}}"
          json:
            id: "{{id}}"
            username: "{{username}}"
            firstName: "{{firstName}}"
            lastName: "{{lastName}}"
            email: "{{email}}"
            password: "{{password}}"
            phone: "{{phone}}"
            userStatus: "{{userStatus}}"
          expect:
            - statusCode: 400
            - headerHas: "content-type"
            - hasProperty: "message"
        think: 1

      - log: "Test when username is invalid"
        put:
          url: "/user/invlidusername"
          json:
            id: "{{id}}"
            username: "invalidusername"
            firstName: "{{firstName}}"
            lastName: "{{lastName}}"
            email: "{{email}}"
            password: "{{password}}"
            phone: "{{phone}}"
            userStatus: "{{userStatus}}"
          expect:
            - statusCode: 400
            - headerHas: "content-type"
            - hasProperty: "error"
        think: 1

      - log: "Test when Authorization token is invalid"
        put:
          headers:
            Authorization: "Bearer invalidtoken"
          url: "/user/{{username}}"
          json:
            id: "{{id}}"
            username: "{{username}}"
            firstName: "{{firstName}}"
            lastName: "{{lastName}}"
            email: "{{email}}"
            password: "{{password}}"
            phone: "{{phone}}"
            userStatus: "{{userStatus}}"
          expect:
            - statusCode: 401 # assuming service will return 401 status for unauthorized requests
            - hasProperty: "error"
        think: 1
