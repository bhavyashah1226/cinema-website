# Test generated by RoostGPT for test roostPostmanTest using AI Type Azure Open AI and AI Model roost-gpt4-32k

# RoostTestHash=b50615cd0e

config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payloads: 
    - path: "createWithArray_post_others.csv"
      fields: ["id", "username", "firstName", "lastName", "email", "password", "phone", "userStatus"]
      skipHeader: true

scenarios:
  - flow:
      - log: "Test Case 1: Attempting to create users with invalid URL"
        post: 
          url: "/random/invalid/url"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
        expect:
          - statusCode: 404
          - hasProperty: 'error'
      - think: 1
      - log: "Test Case 2: Attempting to create users with invalid Authorization"
        post: 
          url: "/user/createWithArray"
          headers:
            Authorization: "Invalid_Token"
            Content-Type: "application/json"
          json:
            id: "{{ id }}"
            username: "{{ username }}"
            firstName: "{{ firstName }}"
            lastName: "{{ lastName }}"
            email: "{{ email }}"
            password: "{{ password }}"
            phone: "{{ phone }}"
            userStatus: "{{ userStatus }}"
        expect:
          - statusCode: 401
          - hasProperty: 'error'
      - think: 1
      - log: "Test Case 3: Attempting to create users with empty body"
        post: 
          url: "/user/createWithArray"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
        expect:
          - statusCode: 400
          - hasProperty: 'error'
      - think: 1
      - log: "Test Case 4: Attempting to create users without required fields in body"
        post: 
          url: "/user/createWithArray"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
            Content-Type: "application/json"
          json:
            id: "{{ id }}"
            username: "{{ username }}"
            firstName: "{{ firstName }}"
            lastName: "{{ lastName }}"
            email: "{{ email }}"
            userStatus: "{{ userStatus }}"
        expect:
          - statusCode: 400
          - hasProperty: 'error'
